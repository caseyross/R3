script.

	import Feed from '/src/model/Feed'
	import Post from '/src/model/Post'

	getLayers = (url) ->
		layers = [{
			type: 'directory'
			href: '/'
			data: {} # TODO
		}]
		[ _, a, b, c, d, e, f ] = url.pathname.split('/')
		p = new URLSearchParams(url.search)
		if a.length > 1
			if ['awardsgiven', 'awardsreceived', 'downvoted', 'hidden', 'mail', 'modmail', 'modqueue', 'saved', 'upvoted'].includes(a)
				[ a, b, c, d, e, f ] = [ 'i', a, b, c, d, e ]
			else
				[ a, b, c, d, e, f ] = [ 'r', a, b, c, d, e ]
		if b
			if ['new', 'rising', 'hot', 'top', 'controversial'].includes(c)
				layers.push
					type: 'feed'
					href: '/' + a + '/' + b
					data: new Feed { prefix: a, name: b, sort: c, after: p.get('after') } 
			else
				layers.push
					type: 'feed'
					href: '/' + a + '/' + b
					data: new Feed { prefix: a, name: b, sort: p.get('sort'), after: p.get('after') }
				switch c
					when 'wiki'
						layers.push
							type: 'wiki'
							href: url.pathname # can have 1 or 2 levels + hash link to a heading
							data: {} # TODO
					when 'comments', 'post'
						if f
							layers.push
								type: 'post'
								href: '/' + a + '/' + b + '/post/' + d + '/comment/' + f
								data: new Post { id: d, commentId: f }
						else if d
							layers.push
								type: 'post'
								href: '/' + a + '/' + b + '/post/' + d
								data: new Post { id: d }
		return layers

	layers = getLayers(location)
	layers.last().tapped = true
	history.replaceState({}, '', layers.last().href)
	
	document.addEventListener 'click', (e) ->
		if e.buttons < 3
			e.preventDefault()

	document.addEventListener 'contextmenu', (e) ->
		unless e.altKey
			e.preventDefault()

	document.addEventListener 'mousedown', (e) ->
		switch e.buttons
			when 1
				for element in e.path
					if element.href
						if element.dataset.gotoLayer
							layers.length = Number(element.dataset.gotoLayer) + 1
						else if element.dataset.layerType
							layers = [
								...layers,
								{
									type: element.dataset.layerType
									href: layers.last().href
									data: element.href
								}
							]
						else if element.origin is location.origin
							layers = [ ...layers, getLayers(new URL element.href).last() ]
						else if element.target is '_blank'
							return window.open(element.href)
						else
							return location.href = element.href
						layers.last().tapped = true
						history.pushState({}, '', layers.last().href)
						break
			when 2
				if layers.length > 1
					layers.length = layers.length - 1
					layers.last().tapped = true
					history.pushState({}, '', layers.last().href)
	
	import Layer from './Layer'

svelte:head
	title {layers.last().type}
nav
	a(href='/' data-goto-layer={0} class:dimmed={layers.length > 1})
		img.logo-icon
		{#if layers.length === 1}
			span.logo-text Ares
main
	{#each layers as layer, i}
		{#if layer.tapped}
			.layer.hide-scrollbar(class:hidden={i < layers.length - 1})
				Layer(layer={layer})

style.
	main
		width 100%
		height 100%
	.layer
		position absolute
		height 100%
		overflow auto
		&.hidden
			content-visibility hidden
	nav
		display flex
		flex-flow column nowrap
		a
			margin 4rem
			&.dimmed
				opacity 0.5
				&:hover
					opacity 1
			img
				height 32px
				width 32px
				border-radius 50%
				background salmon
			.logo-text
				font 900 26px 'Fabrikat Normal'
				letter-spacing -1px
				color gray