script.
	import api from '../../../api/index.js'
	import { format_url } from '../../routing/url.coffee'
	import AccountData from '../shared/AccountData.coffee'
	
	import Button from '../shared/Button.pug'
	import Comment from '../comment/Comment.pug'
	import Error from '../shared/Error.pug'
	import Message from '../message/Message.pug'
	import Post from '../post/Post.pug'
	import Subreddit from '../subreddit/Subreddit.pug'
	import Success from '../shared/Success.pug'

	export after_id = null
	export after_id_type = null
	export collection_id = null
	export multireddit_name = null
	export filter = null
	export page_size = 10
	export search = null
	export sort = null
	export subreddit_name = null
	export subpage = null
	export time_range = null
	export type = null
	export user_name = null

	base_page_id = switch type
		when 'account_messages'
			api.ID('account_messages', filter, page_size)
		when 'account_saved_comments'
			api.ID('account_saved_comments', user_name, page_size)
		when 'account_saved_posts'
			api.ID('account_saved_posts', user_name, page_size)
		when 'account_subscribed_subreddits'
			api.ID('account_subreddits_subscribed', page_size)
		when 'collection_posts'
			api.ID('collection', collection_id)
		when 'multireddit_posts'
			if search
				api.ID('search_posts', "multireddit=#{user_name}-#{multireddit_name}+#{search}", 'all', sort, page_size)
			else
				api.ID('multireddit_posts', user_name, multireddit_name, time_range, sort, page_size)
		when 'popular_subreddits'
			api.ID('subreddits_popular', page_size)
		when 'subreddit_modqueue_comments'
			api.ID('subreddit_modqueue_comments', subreddit_name, page_size)
		when 'subreddit_modqueue_posts'
			api.ID('subreddit_modqueue_posts', subreddit_name, page_size)
		when 'subreddit_posts'
			if search
				api.ID('search_posts', "subreddit=#{subreddit_name}+#{search}", 'all', sort, page_size)
			else
				api.ID('subreddit_posts', subreddit_name, time_range, sort, page_size)
		when 'user_comments'
			api.ID('user_comments', user_name, time_range, sort, page_size)
		when 'user_posts'
			api.ID('user_posts', user_name, time_range, sort, page_size)
	error = null
	has_next_page = (items) ->
		if type.endsWith('_subreddits') # workaround for subreddit names not being valid `after` identifiers
			false
		else if items.length < page_size
			false
		else
			true
	loading = null
	next_after_id = (items) ->
		items.at(-1)?.id or items.at(-1)
	next_after_id_type = (items) ->
		switch items.at(-1)?.was_comment
			when true then 'comment'
			when false then 'message'
			else null
	items = []
	read = []

	api.loadWatch(api.ID(base_page_id, after_id, after_id_type), (x) ->
		{ error, data, loading } = x
		if !error and !loading and data
			items = data?.posts or data
			if type.endsWith('_posts')
				read = items.map((x) -> AccountData.check_post_read(x))
			else
				read = items.map((x) -> false)
	)

nav.feed
	{#if error}
		Error(message="Error loading items.")
	{:else if loading}
		.feed-loading-notification Loading...
	{:else if items}
		{#if items.length === 0}
			.feed-items-empty No {type.split('_').at(-1)}.
		{:else if (filter === 'unread' && read.every((x) => x === true))}
			Success(message="You've read all the {type.split('_').at(-1)} on this page.")
		{:else}
			ol.feed-items
				{#each items as item, i (item)}
					{#if !(filter === 'unread' && read[i])}
						<!-- svelte-ignore a11y-no-noninteractive-element-interactions -->
						li(on:mousedown={e => { if(e.button === 0) { read[i] = true } }})
							{#if type.endsWith('_comments')}
								Comment(id={item?.id || item} out_of_context={true})
							{:else if type.endsWith('_messages')}
								{#if item.was_comment}
									Comment(id={item.id} out_of_context={true})
								{:else}
									Message(message={item})
							{:else if type.endsWith('_posts')}
								a(href={format_url({ post_id: item, subreddit_name })})
									Post(expanded={false} id={item})
							{:else if type.endsWith('_subreddits')}
								a(href={format_url({ subreddit_name: item })})
									Subreddit(expanded={false} name={item})
	menu.feed-actions
		{#if has_next_page(items)}
			Button(link={format_url({ after_id: next_after_id(items), after_id_type: next_after_id_type(items), collection_id, feed_filter: filter, feed_search: search, feed_sort: sort, feed_time_range: time_range, multireddit_name, subreddit_name, subpage, user_name })} loading={loading} text='More')

style.
	.feed
		align-items flex-start
		display flex
		flex-flow column nowrap
		gap 2em
		margin-top 2em
	.feed-items
		display flex
		flex-flow column nowrap
		gap 0.666em