script.
	import { getContext } from 'svelte'

	import api from '../../../api/index.js'
	import { format_url } from '../../routing/url.coffee'

	import AccountData from '../shared/AccountData.coffee'
	import Button from '../shared/Button.pug'
	import ButtonFrame from '../shared/ButtonFrame.pug'
	import ButtonGroup from '../shared/ButtonGroup.pug'
	import Error from '../shared/Error.pug'
	import Feed from '../feed/Feed.pug'
	import MultiredditAvatar from './MultiredditAvatar.pug'
	import MultiredditInfo from './MultiredditInfo.pug'
	import TextInput from '../shared/TextInput.pug'
	
	export after_id = null
	export filter = 'unread'
	export multireddit_name = null
	export search = null
	export sort = null
	export tab = null
	export time_range = null
	export user_name = null

	error = null
	internal_navigate = getContext('internal_navigate')
	multireddit = null
	set_theme_colors = getContext('set_theme_colors')
	tabs =
		_order: ->
			['posts', 'search', 'about']
		about:
			label: 'About'
		posts:
			filters:
				_order: -> ['unread', 'all']
				all:
					label: 'All'
				unread:
					label: 'Unread Only'
			label: 'Posts'
			sorts:
				_order: -> ['hot', 'new', 'other']
				hot:
					label: 'Hot'
				new:
					label: 'New'
				other:
					sorts:
						_order: -> ['other', 'rising', 'top_week', 'top_month', 'top_year', 'top_all']
						other:
							label: 'Other...'
						rising:
							label: 'Rising'
						top_all:
							label: 'Top (All)'
						top_month:
							label: 'Top (30d)'
						top_week:
							label: 'Top (7d)'
						top_year:
							label: 'Top (1y)'
		search:
			label: 'Search'
			sorts:
				_order: -> ['new', 'comments', 'top', 'relevance']
				comments:
					label: 'Most Comments'
				new:
					label: 'Most Recent'
				relevance:
					label: 'Closest Match'
				top:
					label: 'Highest Score'
	tabs_array = (tabs) ->
		tabs._order().map((x) -> { ...tabs[x], value: x })

	api.loadWatch(api.ID('multireddit', user_name, multireddit_name), (x) ->
		{ data: multireddit, error } = x
		set_theme_colors(multireddit?.primary_color, multireddit?.key_color)
		if multireddit?.owner and multireddit?.name
			AccountData.increment_subreddit_viewcount("#{multireddit.owner}-#{multireddit.name}")
	)

svelte:head
	title {user_name.toLowerCase()}-{multireddit_name.toLowerCase()}
{#if error}
	{#if error.code === 403}
		Error(message="Only approved users can access this multireddit." title="Private multireddit")
	{#if error.code === 404}
		Error(message="There is no multireddit available under this name." title="Multireddit not found")
	{:else if error.reason}
		Error(message="An error occurred. This is the best description we have of the error." title="Error: {error.reason}")
	{:else}
		Error(message="An unknown error occurred." title="Unknown error")
{:else if multireddit}
	article.multireddit
		section.multireddit-header
			MultiredditAvatar(multireddit_name={multireddit_name} size='large' user_name={user_name})
			nav.multireddit-header-options
				ButtonFrame
					ButtonGroup(options={tabs_array(tabs).map(x => ({ ...x, link: format_url({ multireddit_name, subpage: x.value, user_name }) }))} selected={tab})
		{#if tab === 'about'}
			section.multireddit-content
				MultiredditInfo(multireddit_name={multireddit_name} user_name={user_name})
		{:else if tab === 'posts'}
			nav.multireddit-posts-header
				data.multireddit-posts-current-page
				menu.multireddit-posts-options
					ButtonFrame
						menu.multireddit-posts-options-sort
							Button(activated={sort === 'hot'} link={format_url({ feed_filter: filter, feed_sort: 'hot', multireddit_name, user_name })} text='Hot')
							Button(activated={sort === 'new'} link={format_url({ feed_filter: filter, feed_sort: 'new', multireddit_name, user_name })} text='New')
							Button(action={value => value === 'other' ? null : internal_navigate({ href: location.origin + format_url({ feed_filter: filter, feed_sort: value.split('_')[0], feed_time_range: value.split('_')[1], multireddit_name, user_name }) })} activated={sort !== 'hot' && sort !== 'new'} options={tabs_array(tabs.posts.sorts.other.sorts)} selected={sort.startsWith('top') ? [sort, time_range].join('_') : sort})
					ButtonFrame
						ButtonGroup(options={tabs_array(tabs.posts.filters).map(x => ({ ...x, link: format_url({ after_id, feed_filter: x.value, feed_sort: sort, feed_time_range: time_range, multireddit_name, user_name }) }))} selected={filter})
			section.multireddit-content.multireddit-posts
				{#key sort}
					{#key time_range}
						{#key after_id}
							{#key filter}
								Feed(after_id={after_id} filter={filter} multireddit_name={multireddit_name} sort={sort} time_range={time_range} type='multireddit_posts' user_name={user_name})
		{:else if tab === 'search'}
			nav.multireddit-posts-header
				data.multireddit-posts-current-page
				ButtonFrame
					menu.multireddit-posts-options-search
						Button(action={value => internal_navigate({ href: location.origin + format_url({ feed_search: search, feed_sort: value, multireddit_name, subpage: 'search', user_name }) }) } activated={true} options={tabs_array(tabs.search.sorts)} selected={sort})
						{#key search}
							TextInput(autofocus={true} enter_action={value => internal_navigate({ href: location.origin + format_url({ feed_search: value, feed_sort: sort, subpage: 'search', multireddit_name, user_name }) })} initial_value={search})
			section.multireddit-content
				{#if search}
					{#key search}
						{#key sort}
							{#key after_id}
								Feed(after_id={after_id} filter='all' multireddit_name={multireddit_name} search={search} sort={sort} subpage='search' type='multireddit_posts' user_name={user_name})

style.
	.multireddit
		padding-right 96px
		width 672px
	.multireddit-content
		margin-top 2em
		padding-left 96px
	.multireddit-header
		align-items flex-end
		display grid
		gap 32px
		grid-template-columns 64px 1fr
		justify-items flex-start
	.multireddit-header-options
		align-items center
		display flex
		gap 10px
	.multireddit-posts-current-page
		align-items center
		display flex
		height 100%
		justify-content center
		width 100%
	.multireddit-posts-header
		align-items flex-start
		display grid
		gap 32px
		grid-template-columns 64px 1fr
		justify-items flex-start
		margin-top 10px
	.multireddit-posts-options
		display flex
		gap 5px
	.multireddit-posts-options-sort
		display flex
		gap 2px