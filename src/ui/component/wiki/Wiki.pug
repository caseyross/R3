script.
	import { getContext, tick } from 'svelte'

	import api from '../../../api/index.js'
	import { Time } from '../../../lib/index.js'
	import { format_url } from '../../routing/url.coffee'
	
	import Error from '../shared/Error.pug'
	import FormattedHTML from '../shared/FormattedHTML.pug'
	import SubredditAvatar from '../subreddit/SubredditAvatar.pug'
	
	export page_name = null
	export revision_id = null
	export subreddit_name = null
	
	error = null
	loading = false
	page = null
	set_theme_colors = getContext('set_theme_colors')

	if page_name == 'pages'
		api.loadWatch(api.ID('wiki_pages', subreddit_name),
			(x) ->
				{ data: page, error, loading } = x
		)
	else
		api.loadWatch(api.ID('wiki', subreddit_name, page_name, revision_id),
			(x) ->
				{ data: page, error, loading } = x
				if location.hash and page
					# a common wiki use case is to load a wiki page directly at a specific heading
					# since the heading may not exist at the time the browser would normally do the scroll, we need to handle it
					# it's not worth it to support this handling for other views, but this is a special case
					await tick()
					document.getElementById(location.hash[1..])?.scrollIntoView()
		)
	api.loadWatch(api.ID('subreddit', subreddit_name), (x) ->
		{ data: subreddit } = x
		set_theme_colors(subreddit?.primary_color, subreddit?.key_color)
	)

svelte:head
	title {subreddit_name.toLowerCase()} wiki: {page_name.toLowerCase()}
{#if error}
	{#if error?.code === 403}
		Error(message="You must be a moderator to access this wiki page." title="Mod-only wiki")
	{:else if error.reason}
		Error(message="An error occurred. This is the best description we have of the error." title="Error: {error.reason}")
	{:else}
		Error(message="An unknown error occurred." title="Unknown error")
{:else if loading}
	p Loading...
{:else if page}
	article.wiki
		SubredditAvatar(name={subreddit_name})
		section.wiki-path
			a(href='/{subreddit_name}/wiki') Wiki
			{#each page_name.split('/').slice(0, page_name.split('/').length - 1) as path_segment, i}
				| â†’
				a(href="/{subreddit_name}/wiki/{page_name.split('/').slice(0, i + 1).join('/')}") {path_segment}
			h1.wiki-path-current-page {page_name.split('/').at(-1).toLowerCase()}
		section.wiki-info
			{#if page.revision_date}
				date.wiki-edit-date(title={Time.sToAbsTimeStr(page.revision_date)}) Last revised {Time.sToRelTimeStr(page.revision_date)} ago
		section.wiki-body
			{#if page_name === 'pages'}
				ol.wiki-all-pages-list.md
					{#each page as page_name}
						li
							a(href={format_url({ subreddit_name, wikipage_name: page_name })}) {page_name}
			{:else}
				{#if page.content_html}
					FormattedHTML(html={page.content_html})
				{:else if page.content_css}
					pre.md {page.content_css}

style.
	.wiki
		width 560px
	.wiki-body
		margin-top 2em
	.wiki-info
		align-items center
		color var(--c-text-weak)
		display flex
		font-size 12px
		gap 1ch
		margin-top 1em
	.wiki-path
		color var(--c-text-weak)
		.wiki-path-current-page
			color var(--c-text-strong)
			font-size 5em
			font-weight var(--f-wght-strong)
			line-height 1
			overflow-wrap anywhere
	:global(.wiki .toc)
		color var(--c-text-weak)
		display none
		max-height 100vh
		overflow auto
		padding 4em 0
		position fixed
		right 6em
		scrollbar-width none
		top 0
		width 320px
		&::-webkit-scrollbar
			display none
		@media (min-width: 1360px)
			display initial
	:global(.wiki .toc a)
		background none
		color inherit
		padding 0
	:global(.wiki .toc a:hover)
		color var(--c-subreddit-theme-text)
	:global(.wiki .toc + *)
		margin-top 0
	:global(.wiki .toc li)
		margin-top 0.666em
	:global(.wiki .toc li::before)
		display none
	:global(.wiki .toc ol ol)
	:global(.wiki .toc ol ul)
	:global(.wiki .toc ul ol)
	:global(.wiki .toc ul ul)
		border-left 1px solid var(--c-text-faint)