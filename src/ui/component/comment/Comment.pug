script.
	import { getContext } from 'svelte'
	
	import api from '../../../api/index.js'
	import { Time } from '../../../lib/index.js'
	import { format_url } from '../../routing/url.coffee'

	import BanDialog from '../dialog/BanDialog.pug'
	import Button from '../shared/Button.pug'
	import CommentEditor from './CommentEditor.pug'
	import FormattedHTML from '../shared/FormattedHTML.pug'
	import Popup from '../shared/Popup.pug'
	import ReportDialog from '../dialog/ReportDialog.pug'
	import UserByline from '../user/UserByline.pug'

	export id = null
	export out_of_context = false
	
	banning = false
	comment = null
	editing = false
	edit_error = null
	edit_sending = false
	focus_comment_id = getContext('focus_comment_id')
	more_replies_loading = false
	replying = false
	reply_error = null
	reply_sending = false
	reporting = false
	score_color = (comment) -> switch
		when comment.distinguished is 'admin' then 'var(--c-admin)'
		when comment.distinguished is 'moderator' then 'var(--c-mod)'
		when comment.is_submitter then 'var(--c-op)'
		when comment.score_hidden or !Number.isFinite(comment.score) then 'var(--c-score-0)'
		when Math.log10(comment.score) > 3 then 'var(--c-score-4)'
		when Math.log10(comment.score) > 2 then 'var(--c-score-3)'
		when Math.log10(comment.score) > 1 then 'var(--c-score-2)'
		when Math.log10(comment.score) > 0 then 'var(--c-score-1)'
		else 'var(--c-score-0)'
	score_text_color = (comment) -> switch
		when comment.distinguished is 'admin' then 'white'
		when comment.distinguished is 'moderator' then 'white'
		when Math.log10(comment.score) > 2 then 'white'
		else 'black'
	title_text = (comment) ->
		score_text = switch
			when comment.score_hidden or !Number.isFinite(comment.score) then 'score hidden'
			when comment.score > 0 then '+' + comment.score
			else comment.score
		time_text = switch
			when comment.edited
				Time.sToAbsRelTimeStr(comment.created_utc) + ' (edited ' + Time.sToAbsRelTimeStr(comment.edited) + ')'
			else
				Time.sToAbsRelTimeStr(comment.created_utc)
		return "#{score_text}, #{time_text}"
	
	interact = (action_type, data) ->
		switch action_type
			when 'approve'
				api.submit(api.ID('comment_approve', id), {}, (status) ->
					if status.success
						api.submit(api.ID('comment_ignore_reports', id))
				)
			when 'distinguish_as_mod'
				api.submit(api.ID('comment_distinguish', id), { type: 'moderator' })
			when 'downvote'
				api.submit(api.ID('comment_vote', id), { numerical_vote: if comment.likes == false then 0 else -1 })
			when 'edit'
				editing = true
			when 'edit_finish'
				api.submit(api.ID('comment_edit', id), { new_text: data.new_text }, (status) ->
					edit_error = status.error
					edit_sending = status.sending
					if status.success
						editing = false
				)
			when 'pin'
				api.submit(api.ID('comment_pin', id))
			when 'remove'
				api.submit(api.ID('comment_remove', id))
			when 'remove_and_ban_user'
				banning = true
			when 'remove_and_ban_user_finish'
				api.submit(api.ID('user_ban', data.user_name, data.subreddit_name), { days: data.days, message_to_user: data.message_to_user, violation_reason: data.violation_reason })
				interact('remove')
				banning = false
			when 'reply'
				replying = true
			when 'reply_finish'
				api.submit(api.ID('comment_reply', id), { text: data.text }, (status) ->
					reply_error = status.error
					reply_sending = status.sending
					if status.success
						replying = false
				)
			when 'report'
				reporting = true
			when 'report_finish'
				api.submit(api.ID('comment_report', id), { violation_reason: data.violation_reason })
				reporting = false
			when 'save'
				api.submit(api.ID('comment_save', id), {})
			when 'undistinguish'
				api.submit(api.ID('comment_distinguish', id), { type: null })
			when 'unpin'
				api.submit(api.ID('comment_pin', id), { unpin: true })
			when 'unsave'
				api.submit(api.ID('comment_save', id), { unsave: true })
			when 'upvote'
				api.submit(api.ID('comment_vote', id), { numerical_vote: if comment.likes == true then 0 else 1 })
	
	api.loadWatch(api.ID('comment', id),
		(x) ->
			{ data: comment } = x
			if comment?.more_replies
				api.watch(comment.more_replies_id,
					(x) -> { loading: more_replies_loading } = x
				)
	)

{#if editing}
	CommentEditor(error={edit_error} initial_text={comment.body} on:submit={e => interact('edit_finish', { new_text: e.detail })} sending={edit_sending})
{:else if comment}
	li(class={out_of_context ? 'comment-clip' : 'comment-tree'})
		<!-- 'comment' role is draft status and not recognized yet -->
		<!-- svelte-ignore a11y-unknown-role -->
		article.comment(class:comment-deleted={(comment.author === '[deleted]' && comment.body[0] === '[') || comment.removal_reason} class:comment-downvoted={comment.likes === false} class:comment-highlighted={id === focus_comment_id} class:comment-upvoted={comment.likes === true} class:comment-with-low-score={!comment.score_hidden && comment.score < 1} data-can-edit={comment.author === api.getUser() || null} data-can-interact={(api.isLoggedIn() && !comment.locked) || null} data-can-mod={comment.can_mod_post || null} data-distinguish={comment.distinguished || null} data-pinned={comment.stickied || null} data-radial-menu='comment' data-saved={comment.saved || null} on:radialmenu={e => interact(e.detail)} role='comment' title={title_text(comment)})
			section.comment-meta
				UserByline(distinguish={comment.distinguished || (comment.is_submitter && 'submitter')} flair_color={comment.author_flair_background_color} flair_rich_text={comment.author_flair_richtext} flair_text={comment.author_flair_text} name={comment.author})
			section.comment-body
				FormattedHTML(html={comment.body_html})
		{#if reporting}
			Popup(on:close={() => reporting = false})
				ReportDialog(on:submit={e => interact('report_finish', { violation_reason: e.detail })} subreddit_name={comment.subreddit} target_type='comment')
		{#if banning}
			Popup(on:close={() => banning = false})
				BanDialog(on:submit={e => interact('remove_and_ban_user_finish', { days: e.detail.days, message_to_user: e.detail.message_to_user, subreddit_name: comment.subreddit, user_name: comment.author })})
		{#if out_of_context}
			cite.comment-source-link
				Button(link={format_url({ post_focus_comment_id: id, post_focus_comment_parent_count: 3, post_id: comment.link_id.slice(3), subreddit_name: comment.subreddit })} text='View â†’')
		{:else}
			ol.comment-replies
				{#if replying}
					CommentEditor(error={reply_error} on:submit={e => interact('reply_finish', { text: e.detail })} sending={reply_sending})
				{#each comment.replies as reply_id (reply_id)}
					svelte:self(id={reply_id})
				{#if comment.num_more_replies > 0}
					menu.comment-more-replies
						Button(action={() => api.load(comment.more_replies_id)} loading={more_replies_loading} text="{comment.num_more_replies} more")
				{#if comment.deeper_replies}
					menu.comment-more-replies
						Button(link={format_url({ post_focus_comment_id: id, post_id: comment.link_id.slice(3), subreddit_name: comment.subreddit })} text='Continue thread...')

style.
	.comment
		display inline-block
		max-width 100%
	.comment-body
		background var(--c-bg-component)
		border-radius 1em
		display inline-block
		padding 10px 1em
		.comment-deleted > &
			opacity 0.25
			pointer-events none
		.comment-highlighted > &
			background-color lightgoldenrodyellow
		.comment-with-low-score:not(.comment-deleted) > &
			opacity 0.5
		:global(& img)
			border-radius 10px
			display inline-block
			max-height 5em
			width auto
	.comment-clip
		display flex
		justify-content space-between
	.comment-more-replies
		padding 0.666em 0
	.comment-replies
		border-left 1px solid var(--c-blend-normal)
		padding-left 24px
	.comment-source-link
		margin-top 0.666em