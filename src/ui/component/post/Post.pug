script.
	import { getContext } from 'svelte'

	import api from '../../../api/index.js'
	import { Time } from '../../../lib/index.js'
	import { format_url, relativize_url } from '../../routing/url.coffee'
	import StatTracker from '../shared/StatTracker.coffee'
	import html_embeds from './embeds/html_embeds.coffee'
	import iframe_embeds from './embeds/iframe_embeds.coffee'

	import BanDialog from '../dialog/BanDialog.pug'
	import Button from '../shared/Button.pug'
	import CommentEditor from '../comment/CommentEditor.pug'
	import FormattedHTML from '../shared/FormattedHTML.pug'
	import LiveTime from '../shared/LiveTime.pug'
	import MediaPlayer from '../shared/MediaPlayer.pug'
	import Popup from '../shared/Popup.pug'
	import PostComments from './PostComments.pug'
	import PostCommentsAutorefreshButton from './PostCommentsAutorefreshButton.pug'
	import PostFlair from './PostFlair.pug'
	import PostTag from './PostTag.pug'
	import ReportDialog from '../dialog/ReportDialog.pug'
	import SubredditAvatar from '../subreddit/SubredditAvatar.pug'
	import UserByline from '../user/UserByline.pug'
	
	export comments_initial_count = 25
	export comments_sort = null
	export expanded = true
	export focus_comment_id = null
	export focus_comment_parent_count = null
	export id = null

	banning = false
	comments_sort_options = [
		{ label: 'Best', value: 'confidence' }
		{ label: 'Top', value: 'top' }
		{ label: 'Q&A', value: 'qa' }
		{ label: 'Old', value: 'old' }
		{ label: 'New', value: 'new' }
		{ label: 'Controversial', value: 'controversial' }
	]
	comments_sort_options_chat = [
		{ label: 'New (Chat Mode)', value: 'new' }
		{ label: 'Old (Chat Mode)', value: 'old' }
	]
	comments_sort_options_contest = [
		{ label: 'Random (Contest Mode)', value: 'random' }
	]
	error = null
	internal_navigate = getContext('internal_navigate') # would prefer not to need this, but browsers don't support <a> in <select>
	loading = false
	post = null
	replying = false
	reply_error = null
	reply_sending = false
	reporting = false
	score_color = (post) -> switch
		when post.distinguished is 'admin' then 'var(--c-admin)'
		when post.distinguished is 'moderator' then 'var(--c-mod)'
		when post.hide_score or !Number.isFinite(post.score) then 'var(--c-score-0)'
		when Math.log10(post.score) > 3 then 'var(--c-score-4)'
		when Math.log10(post.score) > 2 then 'var(--c-score-3)'
		when Math.log10(post.score) > 1 then 'var(--c-score-2)'
		when Math.log10(post.score) > 0 then 'var(--c-score-1)'
		else 'var(--c-score-0)'
	title_text = (post) ->
		score_text = switch
			when post.hide_score or !Number.isFinite(post.score) then 'score hidden'
			when post.score > 0 then '+' + post.score
			else post.score
		time_text = Time.sToAbsTimeStr(post.created_utc) +
			if post.edited
				' (edited ' + Time.sToAbsTimeStr(post.edited) + ')'
			else
				''
		return "#{score_text}, #{time_text}"
	
	interact = (action_type, data) ->
		switch action_type
			when 'approve'
				api.submit(api.ID('post_approve'), {}, (status) ->
					if status.success
						api.submit(api.ID('post_ignore_reports', id))
				)
			when 'ban_user'
				banning = true
			when 'ban_user_finish'
				api.submit(api.ID('user_ban', data.user_name, data.subreddit_name), { days: data.days, message_to_user: data.message_to_user, violation_reason: data.violation_reason })
				banning = false
			when 'downvote'
				api.submit(api.ID('post_vote', id), { numerical_vote: if post.likes == false then 0 else -1 })
			when 'edit'
				window.open('https://reddit.com/' + id)
			when 'remove'
				api.submit(api.ID('post_remove', id))
			when 'reply'
				replying = true
			when 'reply_finish'
				api.submit(api.ID('post_reply', id, comments_sort or 'confidence', comments_initial_count, focus_comment_id, focus_comment_parent_count), { text: data.text }, (status) ->
					reply_error = status.error
					reply_sending = status.sending
					if status.success
						replying = false
				)
			when 'report'
				reporting = true
			when 'report_finish'
				api.submit(api.ID('post_report', id), { violation_reason: data.violation_reason })
				reporting = false
			when 'save'
				api.submit(api.ID('post_save', id), {})
			when 'unsave'
				api.submit(api.ID('post_save', id), { unsave: true })
			when 'upvote'
				api.submit(api.ID('post_vote', id), { numerical_vote: if post.likes == true then 0 else 1 })

	if expanded
		StatTracker.mark_post_read(id)
	api.loadWatch(api.ID('post', id), (x) ->
		{ data: post, error, loading } = x
		if post?.suggested_sort && !comments_sort
			comments_sort = post.suggested_sort
	)
	api.preload(api.ID('post', id, comments_sort or 'confidence', comments_initial_count, focus_comment_id, focus_comment_parent_count))

svelte:head
	{#if post}
		title {post.subreddit} / {post.title}
{#if error}
	article.post.post-unavailable
		{#if error.reason}
			| Post unavailable: {error.reason}
		{:else if error.code === 404}
			| Post or comment not found.
		{:else if error.code === 403}
			| Post unavailable because subreddit is banned.
		{:else}
			| Post unavailable.
{:else if post}
	article.post(class:post-downvoted={post.likes === false} class:post-expanded={expanded} class:post-spoiler={post.spoiler}class:post-stickied={post.stickied} class:post-upvoted={post.likes === true} class:post-with-low-score={post.score < 1})
		header.post-header(data-can-edit={post.author === api.getUser() || null} data-can-interact={(api.isLoggedIn() && !post.locked) || null} data-can-mod={post.can_mod_post || null} data-locked={post.locked || null} data-radial-menu='post' data-saved={post.saved || null} on:radialmenu={e => interact(e.detail)} title={title_text(post)})
			data.post-subreddit
				SubredditAvatar(name={post.subreddit} size='medium')
			ol.post-tags
				{#if post.over_18}
					PostTag(name='nsfw')
				{#if post.stickied}
					PostTag(name='sticky')
				{#if post.locked}
					PostTag(name='locked')
				{#if post.original_content}
					PostTag(name='oc')
				{#if post.link_flair_text}
					PostFlair(color={post.link_flair_background_color} emoji_style='image' rich_text={post.link_flair_richtext} subreddit_name={post.subreddit} text={post.link_flair_text})
			h1.post-title(style='color: {score_color(post)}') {post.title}
			aside.post-metadata
				LiveTime(create_s={post.created_utc} edit_s={post.edited})
				{#if false}
					UserByline(distinguish={post.distinguished} flair_rich_text={post.author_flair_richtext} flair_text={post.author_flair_text} name={post.author})
		{#if expanded}
			section.post-content
				{#if post.removed_by_category}
					.post-content-unavailable
						{#if post.removed_by_category === 'author' || post.removed_by_category === 'deleted'}
							| Deleted by post author.
						{:else if post.removed_by_category === 'automod_filtered'}
							| Removed by AutoModerator.
						{:else if post.removed_by_category === 'content_takedown'}
							| Removed by Reddit due to violating site policy.
						{:else if post.removed_by_category === 'copyright_takedown'}
							| Removed by Reddit due to a copyright notice.
						{:else if post.removed_by_category === 'moderator'}
							| Removed by a moderator.
						{:else if post.removed_by_category === 'reddit'}
							| Removed by Reddit's spam filter.
						{:else}
							| Removed by Reddit (reason not specified).
				{:else if focus_comment_id}
					.post-content-incomplete
						| Viewing a single comment.
						Button(link={format_url({ post_id: id, subreddit_name: post.subreddit })} text='View full post')
				{:else if post.format === 'talk'}
					.post-content-unavailable
						| Reddit Talks are only available on the official app.
						Button(key='e' link='https://www.reddit.com/talk/{post.live_audio?.room_id}' new_tab={true} text='View on Reddit')
				{:else if post.format === 'self' && !post.selftext.length}
					.post-content-empty
				{:else}
					{#if post.selftext_html}
						.post-selftext
							FormattedHTML(html={post.selftext_html})
					{#if post.format === 'crosspost'}
						a(href={format_url({ post_id: post.crosspost_parent, subreddit_name: post.subreddit })})
							svelte:self(id={post.crosspost_parent})
					{:else if post.format === 'image'}
						ol.post-gallery
							{#each post.media as media, i}
								figure.post-gallery-image
									a(href={media.image_url} rel='external noreferrer preconnect' target='_blank')
										picture
											{#if !media.is_gif}
												source(srcset={media.image_url_960})
												source(srcset={media.image_url_640})
											img.post-image(alt='{i + 1} of {post.media.length}' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}")
									{#if media.caption_text || media.caption_url}
										figcaption.post-gallery-image-caption
											{#if media.caption_text}
												| {media.caption_text}
											{#if media.caption_url}
												a(href={relativize_url(media.caption_url)}) {relativize_url(media.caption_url)}
					{:else if post.format === 'link'}
						{#if post.url}
							{#if html_embeds(post)}
								{@const embed = html_embeds(post)}
									{@html embed.html}
									{#if embed.script === 'imgur'}
										script(defer='true' src='https://s.imgur.com/min/embed.js')
									{:else if embed.script === 'twitter'}
										script(defer='true' src='https://platform.twitter.com/widgets.js')
							{:else if iframe_embeds(post.url)}
								{@const embed = iframe_embeds(post.url)}
									<!-- svelte wants iframe "title" attribute, which interferes with fullscreen playback (tooltip obscuring screen) and anyway provides no additional info here beyond what's in the URL -->
									<!-- svelte-ignore a11y-missing-attribute -->
									iframe.post-iframe(allow={embed.iframe_allow} allowfullscreen='true' src={embed.iframe_url} style="aspect-ratio: {embed.iframe_aspect_ratio}")
							{:else}
								.md.post-link
									a(href={relativize_url(post.url)} rel='external noopener preconnect') {relativize_url(post.url)}
					{:else if post.format === 'prediction'}
						ol.md.post-predictions
							{#each post.tournament_data.predictions as prediction}
								strong.post-prediction-title {prediction.title}
								dl.post-prediction-options
									{#each prediction.options as option}
										li.post-prediction-option
											dt
												meter(max={prediction.total_stake_amount} min={0} value={option.total_amount})
											dd {option.text}
						menu.post-content-actions
							Button(key='e' link={post.url} new_tab={true} text='Vote on Reddit')
					{:else if post.format === 'video'}
						{@const media = post.media[0]}
							MediaPlayer(audio_url={media.video_audio_url} height={360 * (1 / Math.sqrt(media.aspect_ratio))} mimic_gif={media.video_is_gif} video_url={media.video_url} width={480})
			section.post-comments
				menu.post-comments-sort-controls
					Button(action={value => internal_navigate({ href: location.origin + format_url({ post_comments_sort: value, post_id: id, subreddit_name: post.subreddit }) })} disabled={!post.num_comments} options={post.discussion_type === 'CHAT' ? comments_sort_options_chat : post.contest_mode ? comments_sort_options_contest : comments_sort_options} selected={comments_sort})
					{#if comments_sort === 'new'}
						PostCommentsAutorefreshButton(count={comments_initial_count} post_id={id})
				{#if replying}
					CommentEditor(error={reply_error} on:submit={e => interact('reply_finish', { text: e.detail })} sending={reply_sending})
				{#key comments_sort}
					PostComments(focus_comment_parent_count={focus_comment_parent_count} focus_comment_id={focus_comment_id} initial_count={comments_initial_count} post_id={id} sort={comments_sort})
		{#if banning}
			Popup(on:close={() => banning = false})
				BanDialog(on:submit={e => interact('ban_user_finish', { days: e.detail.days, message_to_user: e.detail.message_to_user, subreddit_name: post.subreddit, user_name: post.author })})
		{#if reporting}
			Popup(on:close={() => reporting = false})
				ReportDialog(on:submit={e => interact('report_finish', { violation_reason: e.detail })} subreddit_name={post.subreddit} target_type='post')
{:else if loading}
	article.post.post-loading Loading...

style.
	.post
		&.post-expanded
			align-items center
			display flex
			flex-flow column nowrap
			gap 1.666em
			width 720px
		&.post-loading
			padding 10px
		&.post-unavailable
			background salmon
			border-radius 10px
			color white
			padding 10px
	.post-comments
		width 480px
	.post-content
		align-items flex-start
		display flex
		flex-flow column nowrap
		gap 1.333em
		width 480px
		:global(& .twitter-tweet)
			margin 0 !important
			width 100% !important
		:global(& iframe[id^=twitter-widget])
			border-radius 12px
	.post-content-actions
		align-items center
		display flex
		gap 0.666em
		justify-content space-between
		width 100%
	.post-content-incomplete
		align-items center
		background darkkhaki
		border-radius 10px
		color white
		display flex
		flex-flow row nowrap
		justify-content space-between
		padding 10px
		width 360px
	.post-content-unavailable
		align-items center
		background salmon
		border-radius 10px
		color white
		display flex
		flex-flow row nowrap
		justify-content space-between
		padding 10px
		width 360px
	.post-gallery
		display flex
		flex-flow column nowrap
		gap 1.333em
	.post-gallery-image
		display flex
		flex 0 0 auto
		flex-flow column nowrap
		gap 6px
	.post-gallery-image-caption
		color var(--c-text-weak)
		font-size 13px
		letter-spacing 0.375pt
	.post-header
		align-items flex-start
		display flex
		flex-flow column nowrap
		gap 6px
		padding 1em 0
		position relative
		.post-expanded &
			border-bottom 1px solid var(--c-text-faint)
			padding 1em 100px
			width 680px
	.post-iframe
		border-radius 12px
		width 480px
	.post-image
		width 480px
	.post-metadata
		align-items center
		color var(--c-text-weak)
		display flex
		gap 0.666em
	.post-predictions
		display flex
		flex-flow column nowrap
		gap 1em
	.post-prediction-option
		align-items center
		display flex
		gap 1em
		& meter
			width 200px
	.post-selftext
		width 480px
	.post-subreddit
		aspect-ratio 1
		height 32px
		position absolute
		right calc(100% + 1em)
		.post-expanded &
			position unset
	.post-tags
		display flex
		gap 3px
	.post-title
		font-size 1.5em
		font-weight 600
		letter-spacing -1px
		overflow-wrap anywhere
		.post-spoiler:not(.post-expanded) &
			background black
			border-radius 0.5em
			color black !important
		.post-stickied &
			color darkseagreen