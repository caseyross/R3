script.
	import { getContext } from 'svelte'

	import api from '../../../api/index.js'
	import integrations from '../../../config/integrations.coffee'
	import { Time } from '../../../lib/index.js'

	import { apply_query_parameters, format_url, relativize_url } from '../../url/index.js'
	import AccountSettings from '../../persistence/AccountSettings.coffee'

	import Button from '../generic/Button.pug'
	import CommentEditor from '../comment/CommentEditor.pug'
	import FeedLink from '../feed/FeedLink.pug'
	import FormattedHTML from '../generic/FormattedHTML.pug'
	import Popup from '../generic/Popup.pug'
	import PostComments from './PostComments.pug'
	import PostFlair from './PostFlair.pug'
	import PostTag from './PostTag.pug'
	import PostVideoPlayer from './PostVideoPlayer.pug'
	import Status from '../generic/Status.pug'
	import SubredditBanMenu from '../subreddit/SubredditBanMenu.pug'
	import SubredditReportMenu from '../subreddit/SubredditReportMenu.pug'
	
	export comments_initial_count = 100
	export comments_sort = null
	export focus_comment_id = null
	export focus_comment_parent_count = null
	export id = null
	export out_of_context = false
	export selected = false
	export set_selected = () -> {}
	export standalone = false

	banning = false
	comments_sort_options = [
		{ label: 'Hot', value: 'confidence' }
		{ label: 'Top', value: 'top' }
		{ label: 'Old', value: 'old' }
		{ label: 'New', value: 'new' }
		{ label: 'Q&A', value: 'qa' }
		{ label: 'Contro.', value: 'controversial' }
	]
	comments_sort_options_chat = [
		{ label: 'New (Chat Mode)', value: 'new' }
		{ label: 'Old (Chat Mode)', value: 'old' }
	]
	comments_sort_options_contest = [
		{ label: 'Random (Contest Mode)', value: 'random' }
	]
	error = null
	expand_gallery = false
	expand_sticky = false
	expand_spoiler = false
	internal_navigate = getContext('internal_navigate') # would prefer not to need this, but browsers don't support <a> in <select>
	link_domain = (href) ->
		if href.startsWith('/')
			return ''
		url = new URL(href)
		if url.hostname.startsWith('www')
			return url.hostname[4..]
		else
			return url.hostname
	link_path = (href) ->
		if href.startsWith('/')
			return href
		url = new URL(href)
		path = url.pathname
		if url.search
			path = path + '?' + url.search
		if url.hash
			path = path + '#' + url.hash
		return path
	loading = false
	post = null
	replying = false
	reply_error = null
	reply_sending = false
	reporting = false
	score_text = (post) ->
		switch
			when post.hide_score then '?'
			when !Number.isFinite(post.score) then '?'
			when post.score < 1 then 'âˆ’?'
			else post.score - 1
	set_theme_color = getContext('set_theme_color')
	
	interact = (action_type, data) ->
		switch action_type
			when 'approve'
				api.submit(api.ID('post_approve'), {}, (status) ->
					if status.success
						api.submit(api.ID('post_ignore_reports', id))
				)
			when 'downvote'
				api.submit(api.ID('post_vote', id), { numerical_vote: if post.likes == false then 0 else -1 })
			when 'edit'
				window.open('https://reddit.com/' + id)
			when 'remove'
				api.submit(api.ID('post_remove', id))
			when 'remove_and_ban_user'
				banning = true
			when 'remove_and_ban_user_finish'
				api.submit(api.ID('user_ban', data.user_name, data.subreddit_name), { days: data.days, message_to_user: data.message_to_user, violation_reason: data.violation_reason })
				interact('remove')
				banning = false
			when 'reply'
				replying = true
			when 'reply_finish'
				api.submit(api.ID('post_reply', id, comments_sort or 'confidence', comments_initial_count, focus_comment_id, focus_comment_parent_count), { text: data.text }, (status) ->
					reply_error = status.error
					reply_sending = status.sending
					if status.success
						replying = false
				)
			when 'report'
				reporting = true
			when 'report_finish'
				api.submit(api.ID('post_report', id), { violation_reason: data.violation_reason })
				reporting = false
			when 'save'
				api.submit(api.ID('post_save', id), {})
			when 'select_post'
				set_selected()
				AccountSettings.mark_post_read(id)
			when 'unsave'
				api.submit(api.ID('post_save', id), { unsave: true })
			when 'upvote'
				api.submit(api.ID('post_vote', id), { numerical_vote: if post.likes == true then 0 else 1 })

	api.loadWatch(api.ID('post', id), (x) ->
		{ data: post, error, loading } = x
		if post?.suggested_sort && !comments_sort
			comments_sort = post.suggested_sort
		if standalone and post?.subreddit
			api.loadWatch(api.ID('subreddit', post.subreddit), ({ data: subreddit }) ->
				set_theme_color(subreddit?.primary_color || subreddit?.key_color)
			)
	)
	api.preload(api.ID('post', id, comments_sort or 'confidence', comments_initial_count, focus_comment_id, focus_comment_parent_count))

svelte:head
	{#if post && standalone}
		title {post.title} - {post.subreddit}
{#if error}
	{#if error.code === 403}
		Status(type='error' message="This post is in a private subreddit which you are not approved to access." title="Private subreddit")
	{:else if error.code === 404}
		Status(type='error' message="This subreddit was closed permanently by Reddit admins." title="Subreddit banned")
	{:else if error.reason}
		Status(type='error' message="An error occurred. This is the best description we have of the error." title="Error: {error.reason}")
	{:else}
		Status(type='error' message="An unknown error occurred." title="Unknown error")
{:else if post}
	article.post(class:post-selected={selected} data-can-edit={post.author === api.getUser() || null} data-can-interact={(api.isLoggedIn() && !post.locked) || null} data-can-mod={post.can_mod_post || null} data-id={post.id} data-locked={post.locked || null} data-mouse-menu='post' data-saved={post.saved || null} on:focus={e => interact('select_post')} on:mousemenu={e => interact(e.detail)} on:mouseover={() => interact('select_post')} title="{Number.isFinite(post.score) ? post.score + ' points' : 'score unknown'}, {Time.sToAbsRelTimeStr(post.created_utc)} ({Time.sToAbsTimeStr(post.created_utc)}){post.edited ? ', edited ' + Time.sToAbsRelTimeStr(post.edited) : ''}")
		header.post-header
			{#if out_of_context}
				FeedLink(type='subreddit' subreddit_name={post.subreddit})
			{:else}
				{#if post.stickied}
					PostTag(name='sticky')
				{#if post.over_18}
					PostTag(name='nsfw')
				{#if post.spoiler}
					PostTag(name='spoiler')
				{#if post.is_original_content}
					PostTag(name='oc')
				{#if post.locked}
					PostTag(name='locked')
				{#if post.archived}
					PostTag(name='archived')
				{#if post.link_flair_text}
					PostFlair(color={post.link_flair_background_color} emoji_style='image' rich_text={post.link_flair_richtext} size='medium' subreddit_name={post.subreddit} text={post.link_flair_text})
			h1.post-title {post.title}
		{#if post.stickied && !expand_sticky}
			Button(action={() => expand_sticky = true} text='Expand sticky')
		{:else if post.spoiler && !expand_spoiler}
			Button(action={() => expand_spoiler = true} text='Expand spoiler')
		{:else if post.removed_by_category}
			{#if post.removed_by_category === 'author' || post.removed_by_category === 'deleted'}
				Status(type='error' message="Deleted by author.")
			{:else if post.removed_by_category === 'automod_filtered'}
				Status(type='error' message="Removed by AutoModerator.")
			{:else if post.removed_by_category === 'content_takedown'}
				Status(type='error' message="Removed by Reddit due to site policy violation(s).")
			{:else if post.removed_by_category === 'copyright_takedown'}
				Status(type='error' message="Removed by Reddit due to a copyright notice.")
			{:else if post.removed_by_category === 'moderator'}
				Status(type='error' message="Removed by a moderator.")
			{:else if post.removed_by_category === 'reddit'}
				Status(type='error' message="Removed by Reddit's spam filter.")
			{:else}
				Status(type='error' message="Removed by Reddit (reason not specified).")
		{:else if post.format === 'talk'}
			Status(type='error' message="Reddit Talks are only available on the official site.")
				Button(link='https://www.reddit.com/talk/{post.live_audio?.room_id}' new_tab={true} text='View on Reddit')
		{:else if post.selftext || post.format !== 'self'}
			section.post-body
				{#if post.format === 'crosspost'}
					a.post-crosspost-link(href={format_url({ post_id: post.crosspost_parent })})
						svelte:self(id={post.crosspost_parent} out_of_context={true})
				{:else if post.format === 'image'}
					{#each post.media as media, i}
						{#if i === 0 || expand_gallery}
							figure.post-gallery-image
								a(href={media.image_url} rel='external noreferrer preconnect' target='_blank')
									picture
										{#if !media.is_gif}
											source(srcset={media.image_url_960})
										img.post-image(alt='' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}" title='{i + 1} / {post.media.length}')
								{#if media.caption_text || media.caption_url}
									figcaption.post-gallery-image-caption
										{#if media.caption_text}
											| {media.caption_text}
										{#if media.caption_url}
											a(href={relativize_url(media.caption_url)}) {relativize_url(media.caption_url)}
					{#if post.media.length > 1 && !expand_gallery}
						Button(action={() => expand_gallery = true} text='+ {post.media.length - 1} more')
				{:else if post.format === 'link'}
					{#if integrations(post.url)}
						{@const embed = integrations(post.url)}
							{#if embed.html}
								.post-text
									{@html embed.html}
								{#if embed.script === 'twitter'}
									script(defer='true' src='https://platform.twitter.com/widgets.js')
							{:else if embed.iframe_url}
								iframe.post-iframe(allow={embed.iframe_allow} allowfullscreen='true' src={embed.iframe_url} style={embed.iframe_aspect_ratio ? 'aspect-ratio: ' + embed.iframe_aspect_ratio : ''} title='')
					{:else if post.url}
						a.post-link(href={relativize_url(post.url)} rel='external noopener preconnect' target='_blank') {link_domain(relativize_url(post.url)) + link_path(relativize_url(post.url))}
				{:else if post.format === 'prediction'}
					ol.post-predictions
						{#each post.tournament_data.predictions as prediction}
							strong.post-prediction-title {prediction.title}
							dl.post-prediction-options
								{#each prediction.options as option}
									li.post-prediction-option
										dt
											meter(max={prediction.total_stake_amount} min={0} value={option.total_amount})
										dd {option.text}
					Status(type='warning' message="Voting is only available on the official site.")
						Button(link={post.url} new_tab={true} text='View on Reddit')
				{:else if post.format === 'video'}
					{@const media = post.media[0]}
						PostVideoPlayer(audio_url={media.video_audio_url} height={480 / (media.video_aspect_ratio || 1)} video_url={media.video_url} width={480})
				{#if post.selftext_html}
					.post-text
						FormattedHTML(html={post.selftext_html})
		{#if banning}
			Popup(on:close={() => banning = false})
				SubredditBanMenu(on:submit={e => interact('remove_and_ban_user_finish', { days: e.detail.days, message_to_user: e.detail.message_to_user, subreddit_name: post.subreddit, user_name: post.author })})
		{#if reporting}
			Popup(on:close={() => reporting = false})
				SubredditReportMenu(on:submit={e => interact('report_finish', { violation_reason: e.detail })} subreddit_name={post.subreddit} target_type='post')
		{#if selected}
			section.post-comments
				{#if focus_comment_id}
					Status(type='warning' message="Viewing a single comment.")
						Button(link={format_url({ post_id: id, subreddit_name: post.subreddit })} text='View all comments')
				{#if replying}
					CommentEditor(error={reply_error} on:submit={e => interact('reply_finish', { text: e.detail })} sending={reply_sending})
				{#key comments_sort}
					PostComments(focus_comment_parent_count={focus_comment_parent_count} focus_comment_id={focus_comment_id} initial_count={comments_initial_count} post_id={id} sort={comments_sort})
{:else if loading}
	.post-loading Loading...

style.
	.post
		border-radius 1em
		box-shadow 0 0 1px 1px var(--c-blend-weak)
		box-sizing content-box
		padding 1.333em
		transition all 0.7s
		width 480px
	.post-body
		align-items flex-start
		display flex
		flex-flow column nowrap
		gap 0.666em
		padding 0.333em
		width 100%
		&:has(.media-player)
		&:has(.post-gallery-image)
			padding 0
	.post-comments
		display flex
		flex-flow column nowrap
		gap 0.666em
		left calc(50% + 240px)
		height 100vh
		max-width 640px
		overflow-y scroll
		padding 5em 3em 5em 9em
		position fixed
		scrollbar-width none
		top 0
		width calc(50% - 240px)
		&::-webkit-scrollbar
			display none
	.post-crosspost-link
		left -1.666em
		position relative
	.post-gallery-image
		width 100%
	.post-gallery-image-caption
		font-size 9pt
	.post-header
		align-items center
		display flex
		flex-flow row wrap
		gap 0.333em
		padding 0.333em
	.post-iframe
		aspect-ratio 1
		width 100%
	.post-image
		width 100%
	.post-link
		text-decoration underline
		word-break break-all
	.post-predictions
		display flex
		flex-flow column nowrap
		gap 1em
	.post-prediction-option
		align-items center
		display flex
		gap 1em
		& meter
			width 240px
	.post-selected
		box-shadow 0 0 1em 1em var(--c-blend-weak)
	.post-text
		margin-top 1em
	.post-title
		display block
		font-size 1.25rem
		font-weight 500
		overflow-wrap anywhere
		padding 0.333em 0