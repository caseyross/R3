script.
	import available_menus from './radial_menus/index.js'

	active = false
	choice = null
	get_modifier_keys = (event) ->
		modifier_keys = []
		if event.altKey
			modifier_keys.push('alt')
		if event.ctrlKey
			modifier_keys.push('ctrl')
		if event.shiftKey
			modifier_keys.push('shift')
		if modifier_keys.length > 0
			return modifier_keys.join('_')
		return 'unmodified'
	menu = null
	menu_variant = null
	position = null
	radius = 21
	target_element = null
	x_correction = document.documentElement.offsetLeft # adjust for broken fixed positioning when using scrollbar-gutter: stable (Chromium bug #1251856)

	document.addEventListener('contextmenu',
		(event) ->
			if active
				event.preventDefault()
				menu_direction = switch choice
					when 0 then 'C'
					when 1 then 'N'
					when 2 then 'E'
					when 3 then 'S'
					when 4 then 'W'
				final_choice = menu[menu_variant]?(target_element.dataset)?[menu_direction]
				if final_choice
					target_element.dispatchEvent(new CustomEvent('radialmenu', { detail: final_choice?.action }))
				choice = null
				menu_variant = null
				menu = null
				target_element = null
				position = null
				active = false
	)
	document.addEventListener('keydown',
		(event) ->
			if active
				menu_variant = get_modifier_keys(event)
	)
	document.addEventListener('keyup',
		(event) ->
			if active
				menu_variant = get_modifier_keys(event)
	)
	document.addEventListener('mousedown',
		(event) ->
			if event.button is 2 and event.detail > 0 # right button, real event
				if !window.getSelection().isCollapsed and (window.getSelection().focusNode.parentElement == event.target)
					return # if selecting text inside clicked element, allow default browser behavior
				if event.target.tagName is 'A'
					return # if clicking link, allow default browser behavior
				element = event.target.closest("[data-radial-menu]")
				if element
					target_element = element
					menu = available_menus[target_element.dataset.radialMenu]
					menu_variant = get_modifier_keys(event)
					choice = 0
					position = [event.x - x_correction, event.y] 
					active = true
	)
	document.addEventListener('mousemove',
		(event) ->
			if active
				delta_x = event.x - position[0] - x_correction
				delta_y = event.y - position[1]
				if Math.abs(delta_x) < radius and Math.abs(delta_y) < radius
					choice = 0
				else
					if Math.abs(delta_x) > Math.abs(delta_y)
						if delta_x > 0
							choice = 2
						else
							choice = 4
					else
						if delta_y > 0
							choice = 3
						else
							choice = 1
	)

slot
{#if active && menu[menu_variant]?.(target_element.dataset)}
	{@const choices = menu[menu_variant](target_element.dataset)}
		menu.radial-menu(style='height: {radius * 2}px; left: {position[0] - radius}px; top: {position[1] - radius}px; width: {radius * 2}px')
			figure.radial-menu-icon.radial-menu-icon-center ðŸ—™
			figure.radial-menu-icon.radial-menu-icon-north(class:radial-menu-icon-selected={choice === 1}) {choices.N?.icon || ''}
			figure.radial-menu-icon.radial-menu-icon-west(class:radial-menu-icon-selected={choice === 4}) {choices.W?.icon || ''}
			figure.radial-menu-icon.radial-menu-icon-east(class:radial-menu-icon-selected={choice === 2}) {choices.E?.icon || ''}
			figure.radial-menu-icon.radial-menu-icon-south(class:radial-menu-icon-selected={choice === 3}) {choices.S?.icon || ''}

style.
	.radial-menu
		align-items center
		cursor default
		display flex
		font-size 1.5em
		justify-content center
		position fixed
	.radial-menu-icon
		align-items center
		display flex
		justify-content center
		height 100%
		position absolute
		width 100%
		&.radial-menu-icon-selected
			font-size 2em
	.radial-menu-icon-center
		color salmon
	.radial-menu-icon-east
		left 100%
	.radial-menu-icon-north
		bottom 100%
	.radial-menu-icon-south
		top 100%
	.radial-menu-icon-west
		right 100%