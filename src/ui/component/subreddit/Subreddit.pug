script.
	import { getContext } from 'svelte'

	import api from '../../../api/index.js'
	import { Time } from '../../../lib/index.js'
	import { format_url } from '../../routing/url.coffee'

	import AccountData from '../shared/AccountData.coffee'
	import Button from '../shared/Button.pug'
	import ButtonFrame from '../shared/ButtonFrame.pug'
	import ButtonGroup from '../shared/ButtonGroup.pug'
	import Error from '../shared/Error.pug'
	import Feed from '../feed/Feed.pug'
	import FormattedHTML from '../shared/FormattedHTML.pug'
	import Popup from '../shared/Popup.pug'
	import SubredditAvatar from './SubredditAvatar.pug'
	import SubredditInfo from './SubredditInfo.pug'
	import SubredditRules from './SubredditRules.pug'
	import SubredditWidget from './SubredditWidget.pug'
	import TextInput from '../shared/TextInput.pug'
	
	export after_id = null
	export filter = 'unread'
	export name = null
	export search = null
	export sort = null
	export tab = null
	export time_range = null

	error = null
	internal_navigate = getContext('internal_navigate')
	search_flair_widget = null
	search_picking_flair = false
	set_theme_colors = getContext('set_theme_colors')
	subreddit = null
	tabs =
		_order: ({ is_moderator }) ->
			if is_moderator
				['posts', 'mod', 'search', 'rules', 'about']
			else
				['posts', 'search', 'rules', 'about']
		about:
			label: 'About'
		mod:
			filters:
				_order: -> ['posts', 'comments']
				comments:
					label: 'Comments'
				posts:
					label: 'Posts'
			label: 'Modqueue'
		posts:
			filters:
				_order: -> ['unread', 'all']
				all:
					label: 'All'
				unread:
					label: 'Unread Only'
			label: 'Posts'
			sorts:
				_order: -> ['hot', 'new', 'other']
				hot:
					label: 'Hot'
				new:
					label: 'New'
				other:
					sorts:
						_order: -> ['other', 'rising', 'top_week', 'top_month', 'top_year', 'top_all']
						other:
							label: 'Other...'
						rising:
							label: 'Rising'
						top_all:
							label: 'Top (All)'
						top_month:
							label: 'Top (30d)'
						top_week:
							label: 'Top (7d)'
						top_year:
							label: 'Top (1y)'
		rules:
			label: 'Rules'
		search:
			label: 'Search'
			sorts:
				_order: -> ['new', 'comments', 'top', 'relevance']
				comments:
					label: 'Most Comments'
				new:
					label: 'Most Recent'
				relevance:
					label: 'Closest Match'
				top:
					label: 'Highest Score'
	tabs_array = (tabs, is_moderator) ->
		tabs._order({ is_moderator }).map((x) -> { ...tabs[x], value: x })

	api.loadWatch(api.ID('subreddit', name), (x) ->
		{ data: subreddit, error } = x
		set_theme_colors(subreddit?.primary_color, subreddit?.key_color)
	)
	api.loadWatch(api.ID('subreddit_widgets', name), (x) ->
		{ data: widgets } = x
		search_flair_widget = widgets?.sidebar.find((x) => x.kind == 'post-flair')
	)
	AccountData.increment_subreddit_viewcount(name.toLowerCase())

svelte:head
	title {name.toLowerCase()}
{#if error}
	{#if error.code === 403}
		Error(message="Only approved users can access this subreddit." title="Private subreddit")
	{:else if error.code === 404}
		Error(message="This subreddit was closed permanently by Reddit admins." title="Subreddit banned")
	{:else if error.reason}
		Error(message="An error occurred. This is the best description we have of the error." title="Error: {error.reason}")
	{:else}
		Error(message="An unknown error occurred." title="Unknown error")
{:else if subreddit}
	article.subreddit
		section.subreddit-header
			SubredditAvatar(name={name} size='large')
			nav.subreddit-header-options
				ButtonFrame
					ButtonGroup(options={tabs_array(tabs, subreddit?.user_is_moderator).map(x => ({ ...x, link: format_url({ subpage: x.value, subreddit_name: name }) }))} selected={tab})
				{#if subreddit.wiki_enabled}
					Button(link={format_url({ subreddit_name: name, wikipage_name: 'index' })} text='Wiki')
		{#if tab === 'about'}
			section.subreddit-content
				SubredditInfo(name={name})
		{:else if tab === 'mod'}
			ButtonFrame
				ButtonGroup(options={tabs_array(tabs.mod.filters).map(x => ({ ...x, link: format_url({ feed_filter: x.value, subpage: 'mod', subreddit_name: name }) }))} selected={filter})
			section.subreddit-content
				{#if filter === 'comments'}
					{#key after_id}
						Feed(after_id={after_id} filter={filter} subpage='mod' subreddit_name={name} type='subreddit_modqueue_comments')
				{:else if filter === 'posts'}
					{#key after_id}
						Feed(after_id={after_id} filter={filter} subpage='mod' subreddit_name={name} type='subreddit_modqueue_posts')
		{:else if tab === 'rules'}
			section.subreddit-content
				SubredditRules(name={name})
		{:else if tab === 'posts'}
			nav.subreddit-posts-header
				data.subreddit-posts-current-page {subreddit.accounts_active}
				menu.subreddit-posts-options
					ButtonFrame
						menu.subreddit-posts-options-sort
							Button(activated={sort === 'hot'} link={format_url({ feed_filter: filter, feed_sort: 'hot', subreddit_name: name })} text='Hot')
							Button(activated={sort === 'new'} link={format_url({ feed_filter: filter, feed_sort: 'new', subreddit_name: name })} text='New')
							Button(action={value => value === 'other' ? null : internal_navigate({ href: location.origin + format_url({ feed_filter: filter, feed_sort: value.split('_')[0], feed_time_range: value.split('_')[1], subreddit_name: name }) })} activated={sort !== 'hot' && sort !== 'new'} options={tabs_array(tabs.posts.sorts.other.sorts)} selected={sort.startsWith('top') ? [sort, time_range].join('_') : sort})
					ButtonFrame
						ButtonGroup(options={tabs_array(tabs.posts.filters).map(x => ({ ...x, link: format_url({ after_id, feed_filter: x.value, feed_sort: sort, feed_time_range: time_range, subreddit_name: name }) }))} selected={filter})
			section.subreddit-content.subreddit-posts
				{#key sort}
					{#key time_range}
						{#key after_id}
							{#key filter}
								Feed(after_id={after_id} filter={filter} sort={sort} subreddit_name={name} time_range={time_range} type='subreddit_posts')
		{:else if tab === 'search'}
			nav.subreddit-posts-header
				data.subreddit-posts-current-page {subreddit.accounts_active}
				ButtonFrame
					menu.subreddit-posts-options-search
						Button(action={value => internal_navigate({ href: location.origin + format_url({ feed_search: search, feed_sort: value, subpage: 'search', subreddit_name: name }) }) } activated={true} options={tabs_array(tabs.search.sorts)} selected={sort})
						{#key search}
							TextInput(autofocus={true} enter_action={value => internal_navigate({ href: location.origin + format_url({ feed_search: value, feed_sort: sort, subpage: 'search', subreddit_name: name }) })} initial_value={search})
						{#if search_flair_widget}
							Button(action={() => search_picking_flair = true} text='Flairs...')
							{#if search_picking_flair}
								<!-- svelte-ignore a11y-no-static-element-interactions -->
								.subreddit-flair-search-close-handler(on:click={() => search_picking_flair = false} on:keydown={e => { if(e.key === 'Enter') { search_picking_flair = false } } })
									Popup(on:close={() => search_picking_flair = false})
										SubredditWidget(widget={search_flair_widget})
			section.subreddit-content
				{#if search}
					{#key search}
						{#key sort}
							{#key after_id}
								Feed(after_id={after_id} filter='all' search={search} sort={sort} subpage='search' subreddit_name={name} type='subreddit_posts')

style.
	.subreddit
		padding-right 96px
		width 672px
	.subreddit-content
		margin-top 2em
		padding-left 96px
	.subreddit-flair-search-close-handler
		position absolute
	.subreddit-header
		align-items flex-end
		display grid
		gap 32px
		grid-template-columns 64px 1fr
		justify-items flex-start
	.subreddit-header-options
		align-items center
		display flex
		gap 10px
	.subreddit-posts-current-page
		align-items center
		display flex
		height 100%
		justify-content center
		width 100%
	.subreddit-posts-header
		align-items flex-start
		display grid
		gap 32px
		grid-template-columns 64px 1fr
		justify-items flex-start
		margin-top 10px
	.subreddit-posts-options
		display flex
		gap 5px
	.subreddit-posts-options-search
		display flex
		gap 10px
	.subreddit-posts-options-sort
		display flex
		gap 2px