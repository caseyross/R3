script.
	import { getContext } from 'svelte'

	import api from '../../../api/index.js'

	import { hotkey } from '../../common/actions/hotkeys.coffee'

	import Button from '../../common/Button.pug'
	import HotkeyLabel from '../../common/HotkeyLabel.pug'
	import TextInput from '../../common/TextInput.pug'
	import Feed from '../feed/Feed.pug'
	import SubredditTag from '../subreddit/SubredditTag.pug'

	subreddits_popular = null
	api.loadWatch(api.ID('global_subreddits_popular', 5), (x) ->
		subreddits_popular = x?.data
	)
	
	subreddits_subscribed = null
	api.loadWatch(api.ID('current_user_subreddits_subscribed', 100), (x) ->
		subreddits_subscribed = x?.data or []
		subreddits_subscribed.sort()
	)

	watchlist = (localStorage['watchlist'] or 'x x x x x x x x x x').split(' ')
	editing_watchlist = false
	tentative_watchlist = null
	edit_watchlist = ->
		tentative_watchlist = watchlist
		editing_watchlist = true
	save_watchlist = ->
		watchlist = tentative_watchlist.map((value) =>
			switch
				when value.startsWith('/u/') then return 'u_' + value[3..]
				when value.startsWith('u/') then return 'u_' + value[2..]
				when value.startsWith('/r/') then return value[3..]
				when value.startsWith('r/') then return value[2..]
				when value.startsWith('/') then return value[1..]
				else return value
		)
		localStorage['watchlist'] = watchlist.join(' ')
		editing_watchlist = false

	getContext('set_theme_color')()

nav#subreddit-search
	TextInput(key='/' label='Search:')
#dashboard-layout
	section
		h1 Watchlist
		ol.subreddits#subreddits-watchlist
			{#each [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] as number, index}
				li#subreddits-watchlist-item
					HotkeyLabel(key={number})
					{#if editing_watchlist}
						TextInput(initial_value={watchlist[index].length > 1 && watchlist[index]} type_action={(value) => tentative_watchlist[index] = value})
					{:else}
						{#if watchlist[index].length > 1}
							a(href='/{watchlist[index]}' use:hotkey={number})
								SubredditTag(name={watchlist[index]})
		{#if editing_watchlist}
			Button(action={save_watchlist} text='Save')
		{:else}
			Button(action={edit_watchlist} text='Edit')
	section
		h1 Subscriptions
		{#if api.isLoggedIn()}
			{#if subreddits_subscribed}
				ol.subreddits#subreddits-subscribed
					{#each subreddits_subscribed as name}
						SubredditTag(name={name})
					Button(link='/r/subscriptions' text='Multireddit of subscriptions')
		{:else}
			Button(link={api.getLoginURL({ memoString: location.pathname })} text='→ Login')
	section
		h1 Trending
		{#if subreddits_popular}
			ol.subreddits#subreddits-popular
				{#each subreddits_popular as name}
					SubredditTag(name={name})
				Button(link='/r/popular' text='Multireddit of popular')
nav#home-menu
	a(href='/')
		img(alt='' src='/icon_frog.png')
menu#auth-menu
	{#if api.isLoggedIn()}
		Button(action={() => { api.logout(); localStorage.clear(); location.reload() }} text='Logout →')
	{:else}
		Button(link={api.getLoginURL({ memoString: location.pathname })} text='→ Login')

style.
	#auth-menu
		bottom 1em
		right 1em
		position fixed
	#dashboard-layout
		display grid
		gap 80px
		grid-auto-flow column
		height 100dvh
		place-items center
		width 100dvw
	#home-menu
		top 1em
		left 1em
		position fixed
	#subreddit-search
		top 1em
		right 1em
		position fixed
	#subreddits-watchlist-item
		display flex
		align-items center
		gap 6px
	.subreddits
		display flex
		flex-flow column wrap
		gap 6px