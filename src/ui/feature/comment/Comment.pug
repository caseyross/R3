script.
	import { getContext } from 'svelte'
	import api from '../../../api/index.js'
	import { Time } from '../../../lib/index.js'
	
	import { format_url } from '../../app/routing/url.coffee'
	import Button from '../../common/Button.pug'
	import FormattedHTML from '../../common/FormattedHTML.pug'
	import Popup from '../../common/Popup.pug'
	import ReportMenu from '../menu/ReportMenu.pug'
	import UserByline from '../user/UserByline.pug'

	import CommentEditor from './CommentEditor.pug'

	export id = null
	export out_of_context = false
	focus_comment_id = getContext('focus_comment_id')
	
	comment = null
	editing = false
	edit_error = null
	edit_sending = false
	more_replies_loading = false
	replying = false
	reply_error = null
	reply_sending = false
	reporting = false
	score_color = 'lightgray'
	score_text = '???'
	score_text_color = 'var(--c-text-weak)'
	api.loadWatch(api.ID('comment', id),
		(x) ->
			{ data: comment } = x
			if comment?
				score_color = switch
					when comment.distinguished is 'admin' then 'var(--c-admin)'
					when comment.distinguished is 'moderator' then 'var(--c-mod)'
					when comment.is_submitter then 'var(--c-op)'
					when comment.score_hidden then score_color
					when !Number.isFinite(comment.score) then score_color
					when Math.log10(comment.score) > 3 then 'var(--c-score-4)'
					when Math.log10(comment.score) > 2 then 'var(--c-score-3)'
					when Math.log10(comment.score) > 1 then 'var(--c-score-2)'
					when Math.log10(comment.score) > 0 then 'var(--c-score-1)'
					else score_color
				score_text = switch
					when comment.score_hidden then score_text
					when !Number.isFinite(comment.score) then score_text
					else comment.score
				score_text_color = switch
					when comment.distinguished is 'admin' then 'white'
					when comment.distinguished is 'moderator' then 'white'
					when comment.is_submitter then 'white'
					else score_text_color
				if comment.more_replies
					api.watch(comment.more_replies_id,
						(x) -> { loading: more_replies_loading } = x
					)
	)

	interact = (action_type, data) ->
		switch action_type
			when 'approve'
				api.submit(api.ID('comment_approve', id), {}, (status) ->
					if status.success
						api.submit(api.ID('comment_ignore_reports', id))
				)
			when 'ban_user'
				api.submit(api.ID('user_ban', data.user_name, data.subreddit_name), { days: data.days, message_to_user: data.message_to_user, violation_reason: data.violation_reason })
			when 'distinguish_as_mod'
				api.submit(api.ID('comment_distinguish', id), { type: 'moderator' })
			when 'edit'
				editing = true
			when 'edit_finish'
				api.submit(api.ID('comment_edit', id), { new_text: data.new_text }, (status) ->
					edit_error = status.error
					edit_sending = status.sending
					if status.success
						editing = false
				)
			when 'pin'
				api.submit(api.ID('comment_pin', id))
			when 'remove'
				api.submit(api.ID('comment_remove', id))
			when 'reply'
				replying = true
			when 'reply_finish'
				api.submit(api.ID('comment_reply', id), { text: data.text }, (status) ->
					reply_error = status.error
					reply_sending = status.sending
					if status.success
						replying = false
				)
			when 'report'
				reporting = true
			when 'report_finish'
				api.submit(api.ID('comment_report', id), { violation_reason: data.violation_reason })
				reporting = false
			when 'save'
				api.submit(api.ID('comment_save', id), {})
			when 'undistinguish'
				api.submit(api.ID('comment_distinguish', id), { type: null })
			when 'unpin'
				api.submit(api.ID('comment_pin', id), { unpin: true })
			when 'unsave'
				api.submit(api.ID('comment_save', id), { unsave: true })
			when 'vote'
				new_vote =
					switch data.mouse_button_number
						when 0 # left
							if data.current_vote is 1 then 0 else 1
						when 2 # right
							if data.current_vote is -1 then 0 else -1
				if new_vote != data.current_vote
					api.submit(api.ID('comment_vote', id), { numerical_vote: new_vote })

{#if editing}
	CommentEditor(error={edit_error} initial_text={comment.body} on:submit={e => interact('edit_finish', { new_text: e.detail })} sending={edit_sending})
{:else if comment}
	li(class={out_of_context ? 'comment-clip' : 'comment-tree'})
		<!-- 'comment' role is draft status and not recognized yet -->
		<!-- svelte-ignore a11y-unknown-role -->
		article.comment(class:comment-deleted={(comment.author === '[deleted]' && comment.body[0] === '[') || comment.removal_reason} class:comment-downvoted={comment.likes === false} class:comment-highlighted={id === focus_comment_id} class:comment-upvoted={comment.likes === true} class:comment-with-low-score={!comment.score_hidden && comment.score < 1} role='comment' title={comment.edited ? Time.sToAbsRelTimeStr(comment.created_utc) + ' (edited ' + Time.sToAbsRelTimeStr(comment.edited) + ')' : Time.sToAbsRelTimeStr(comment.created_utc)})
			{#if api.isLoggedIn()}
				button.comment-score(on:contextmenu={e => e.preventDefault()} on:mousedown={e => interact('vote', { current_vote: comment.likes === true ? 1 : comment.likes === false ? -1 : 0, mouse_button_number: e.button })} style='background: {score_color}; color: {score_text_color}') {score_text}
			{:else}
				data.comment-score(style='background: {score_color}; color: {score_text_color}') {score_text}
			section.comment-body(data-can-edit={comment.author === api.getUser() || null} data-can-mod={comment.can_mod_post || null} data-distinguish={comment.distinguished || null} data-pinned={comment.pinned || null} data-radial-menu='comment' data-saved={comment.saved || null} on:radialmenu={e => interact(e.detail)})
				FormattedHTML(html={comment.body_html})
			aside.comment-user-info
				UserByline(distinguish={comment.distinguished || (comment.is_submitter && 'submitter')} flair_color={comment.author_flair_background_color} flair_rich_text={comment.author_flair_richtext} flair_text={comment.author_flair_text} name={comment.author})
		{#if reporting}
			Popup(on:close={() => reporting = false})
				ReportMenu(on:submit={e => interact('report_finish', { violation_reason: e.detail })} subreddit_name={comment.subreddit} target_type='comment')
		{#if out_of_context}
			cite.comment-source-info
				Button(link={format_url({ post_focus_comment_parent_count: 3, post_focus_comment_id: id, post_id: comment.link_id.slice(3), subreddit_name: comment.subreddit })} text='View in context â†’')
		{:else}
			ol.comment-replies
				{#if replying}
					CommentEditor(error={reply_error} on:submit={e => interact('reply_finish', { text: e.detail })} sending={reply_sending})
				{#each comment.replies as reply_id (reply_id)}
					svelte:self(id={reply_id})
				{#if comment.num_more_replies > 0}
					menu.comment-more-replies
						Button(action={() => api.load(comment.more_replies_id)} icon_plus={true} loading={more_replies_loading} text="{comment.num_more_replies} more")
				{#if comment.deeper_replies}
					menu.comment-more-replies
						Button(link='/r/{comment.subreddit}/post/{comment.link_id.slice(3)}/comment/{id}' text='Continue thread...')

style.
	.comment-user-info
		bottom 100%
		left 0
		opacity 0
		position absolute
		.comment:hover &
			opacity 1
	.comment
		display inline-block
		margin 0.666em 0
		max-width 360px
		position relative
	.comment-body
		background var(--c-subreddit-theme)
		border-radius 12px
		color var(--c-subreddit-theme-text)
		display inline-block
		padding 8px 9px 9px 11px
		.comment-deleted > &
			opacity 0.25
			pointer-events none
		.comment-highlighted > &
			outline 1px solid
		.comment-with-low-score:not(.comment-deleted) > &
			opacity 0.5
		:global(& img)
			border-radius 6px
			height auto
			margin 0
	.comment-clip
		display flex
	.comment-more-replies
		padding 0.666em 0
	.comment-replies
		border-left 1px solid var(--c-blend-normal)
		padding-left 4em
	.comment-score
		border-radius 4px
		font-size 12px
		font-weight bold
		padding 1px 4px
		position absolute
		right calc(100% + 2ch)
		user-select none
		white-space pre
		.comment-upvoted &::before
			content url('/icon_upvote.svg')
		.comment-downvoted &::before
			content url('/icon_downvote.svg')
	.comment-source-info
		margin 0.666em 1em