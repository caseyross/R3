script.
	import api from '../../../api/index.js'
	import { StringMatch } from '../../../lib/index.js'
	import Button from '../../common/Button.pug'
	import ButtonGroup from '../../common/ButtonGroup.pug'
	import PostsListInfo from '../posts/PostsListInfo.pug'

	export type = null

	export page_size = 10
	export posts_sort = 'hot'
	
	export selected_post_short_id = null

	base_page_id = null
	error = false
	has_next_page = false
	loading = false
	page = null
	pages = []
	pages_error = []
	pages_loading = []
	
	switch type
		when 'approved-user'
			base_page_id = api.ID('current_user_subreddits_approved_to_submit', 100)
		when 'global-new'
			base_page_id = api.ID('global_subreddits_new', 100)
		when 'global-popular'
			base_page_id = api.ID('global_subreddits_popular', 100)
		when 'moderator'
			base_page_id = api.ID('current_user_subreddits_moderated', 100)
		when 'subscriber'
			base_page_id = api.ID('current_user_subreddits_subscribed', 100)
	
	sort_options = [
		{
			label: 'Hot',
			value: 'hot'
		}
		{
			label: 'Top',
			value: 'top'
		}
		{
			label: 'New',
			value: 'new'
		}
		{
			label: 'Controversial',
			value: 'controversial'
		}
	]
	time_range_options = [
		{
			label: 'All',
			value: 'all'
		}
		{
			label: 'Year',
			value: 'year'
		}
		{
			label: 'Month',
			value: 'month'
		}
		{
			label: 'Week',
			value: 'week'
		}
		{
			label: 'Day',
			value: 'day'
		}
	]

	load_page = (page_number) ->
		if cache_key
			pages[page_number] = localStorage[cache_key + '.' + page_number]?.split(' ') ? []
		if page_number is 0
			page_id = base_page_id
		else
			after_short_id = pages[page_number - 1].at(-1)
			page_id = api.ID(base_page_id, after_short_id)
		api.loadWatch(page_id, ({ data: page, error, loading }) ->
			if loading then pages_loading[page_number] = loading
			if error then pages_error[page_number] = error
			if page
				pages[page_number] = page
				is_last_page = page_number == pages.length - 1
				if is_last_page
					if page_number is 0
						if page.length >= page_size
							has_next_page = true
					else
						if page.length < page_size
							has_next_page = false
				if cache_key
					localStorage[cache_key + '.' + page_number] = page.join(' ')
		)

	if base_page_id then load_page(0)

svelte:head
	title {base_path}
nav.listing
	{#if error}
		{#if error instanceof api.errors.ServerError}
			p Content unavailable.
			a(href='https://www.reddit.com{official_path}') Visit Reddit to see why.
	{:else if loading}
		p Loading...
	{:else}
		header.listing-info
			{#if sort_options}
				ButtonGroup(baselink={base_path + '/'} options={sort_options} selected={posts_sort.split('-')[0]} title='Posts')
				{#if ['top', 'controversial', 'search'].includes(posts_sort.split('-')[0])}
					ButtonGroup(baselink={base_path + '/' + posts_sort.split('-')[0] + '-'} options={time_range_options} selected={posts_sort.split('-')[1]})
				input(bind:value={search_text} on:change={() => console.log(search_text)} placeholder='Search subreddit...' type='text')
			{#if filterable}
				<!-- svelte-ignore a11y-autofocus -->
				input.listing-filter(autofocus={true} bind:value={filter_text} type='search')
		ol.listing-content
			{#if pages.length}
				{#each pages as page}
					{#each StringMatch.match(page, filter_text) as { string }, i}
						{#if type.endsWith('multireddits')}
							ListingNameTag(link="/m/{string.replace('-', '/')}" text={string} type='multireddit_posts')
						{:else if type.endsWith('posts')}
							PostInfoCard(post_short_id={string} selected={string === post_short_id})
						{:else if type.endsWith('subreddits')}
							{#if string.startsWith('u_')}
								ListingNameTag(link='/u/{string.slice(2)}' text={string.slice(2)} type='user_posts')
							{:else}
								ListingNameTag(link='/r/{string}' text={string} type='subreddit_posts')
		menu.listing-actions
			{#if has_next_page}
				Button(action={() => load_page(pages.length)} text='Load next page')
style.
	.listing
		display flex
		flex-flow column nowrap
		gap 2em
		height 100%
		width 300px
	.listing-actions
		display flex
	.listing-content
		background var(--c-tint-normal)
		border-radius 10px
		flex 1
		overflow auto
		padding 0
	.listing-filter
		border 1px solid
	.listing-info
		flex 0 0 auto