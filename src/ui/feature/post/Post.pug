script.
	import { getContext } from 'svelte'

	import api from '../../../api/index.js'

	import { format_url, relativize_url } from '../../app/routing/url.coffee'

	import Button from '../../common/Button.pug'
	import Date from '../../common/Date.pug'
	import MediaPlayer from '../../common/MediaPlayer.pug'
	import FormattedHTML from '../../common/FormattedHTML.pug'

	import SubredditNavigation from '../subreddit/SubredditNavigation.pug'	
	import UserByline from '../user/UserByline.pug'

	import PostComments from './PostComments.pug'
	import PostCommentsAutorefreshButton from './PostCommentsAutorefreshButton.pug'
	import PostFlair from './PostFlair.pug'
	import PostLink from './PostLink.pug'

	import html_embeds from './embed/html_embeds.coffee'
	import iframe_embeds from './embed/iframe_embeds.coffee'
	
	export comments_initial_count = 25
	export comments_sort = null
	export focus_comment_parent_count = null
	export focus_comment_id = null
	export id = null

	comments_sort_options = [
		{ label: 'Best', value: 'confidence' }
		{ label: 'Top', value: 'top' }
		{ label: 'Q&A', value: 'qa' }
		{ label: 'Old', value: 'old' }
		{ label: 'New', value: 'new' }
		{ label: 'Controversial', value: 'controversial' }
	]
	comments_sort_options_chat = [
		{ label: 'New (Chat Mode)', value: 'new' }
		{ label: 'Old (Chat Mode)', value: 'old' }
	]
	comments_sort_options_contest = [
		{ label: 'Random (Contest Mode)', value: 'random' }
	]
	error = null
	internal_navigate = getContext('internal_navigate') # would prefer not to need this, but browsers don't support <a> in <select>
	loading = false
	post = null

	api.loadWatch(api.ID('post', id), (x) ->
		{ data: post, error, loading } = x
		if post?.suggested_sort && !comments_sort
			comments_sort = post.suggested_sort
	)
	api.preload(api.ID('post', id, comments_sort or 'confidence', comments_initial_count, focus_comment_id, focus_comment_parent_count))

	vote = (current_vote, mouse_button_number) ->
		new_vote = 
			switch mouse_button_number
				when 0 # left
					if current_vote is 1 then 0 else 1
				when 2 # right
					if current_vote is -1 then 0 else -1
		if new_vote != current_vote
			api.submit(api.ID('post_vote', id), { numerical_vote: new_vote })

svelte:head
	{#if post}
		title {post.subreddit} / {post.title}
{#if error}
	article.post.post-unavailable
		{#if error.reason}
			| Post unavailable: {error.reason}
		{:else if error.code === 404}
			| Post or comment not found.
		{:else if error.code === 403}
			| Subreddit banned.
		{:else}
			| Post unavailable for unknown reasons.
{:else if post}
	article.post(class:post-downvoted={post.likes === false} class:post-stickied={post.stickied} class:post-upvoted={post.likes === true} class:post-with-low-score={post.score < 1} data-id={id} data-locked={post.locked || null} data-radial-menu='post' data-saved={post.saved || null})
		nav(style='position:fixed;top:2em;right:calc(50% + 320px)')
			SubredditNavigation(subreddit_name={post.subreddit})
		header.post-header
			button.post-score(on:mousedown={e => vote(post.likes === true ? 1 : post.likes === false ? -1 : 0, e.button)}) {post.hide_score ? '?' : post.score}
			aside.post-metadata
				div(style='display:flex; align-items:center; gap:1em')
					Date(created_s={post.created_utc} edited_s={post.edited} format='rel-abs')
					| by
					UserByline(distinguish={post.distinguished} flair_rich_text={post.author_flair_richtext} flair_text={post.author_flair_text} name={post.author})
				{#if post.link_flair_text}
					PostFlair(color={post.link_flair_background_color} emoji_style='image' rich_text={post.link_flair_richtext} text={post.link_flair_text})
			h1.post-title {post.title}
		{#if post.removed_by_category}
			section.post-content.post-content-unavailable
				{#if post.removed_by_category === 'author' || post.removed_by_category === 'deleted'}
					| Deleted by author.
				{:else if post.removed_by_category === 'automod_filtered'}
					| Removed by AutoModerator.
				{:else if post.removed_by_category === 'content_takedown'}
					| Removed by Reddit due to violating
					a(href='https://www.redditinc.com/policies/content-policy') site policy.
				{:else if post.removed_by_category === 'copyright_takedown'}
					| Removed by Reddit due to a copyright notice.
				{:else if post.removed_by_category === 'moderator'}
					| Removed by a moderator.
				{:else if post.removed_by_category === 'reddit'}
					| Removed by Reddit spam filter.
				{:else}
					| Removed by Reddit, reason not specified.
		{:else if focus_comment_id}
			section.post-content.post-content-incomplete
				| Viewing a single comment thread.
				Button(link={format_url({ post_id: id, subreddit_name: post.subreddit })} text='View complete post')
		{:else if post.format === 'talk'}
			section.post-content.post-content-unavailable
				| Reddit Talks are only available on the official app.
				Button(key='e' link='https://www.reddit.com/talk/{post.live_audio?.room_id}' new_tab={true} text='View on Reddit')
		{:else if post.format === 'self' && !post.selftext.length}
			section.post-content.post-content-empty
		{:else}
			section.post-content
				{#if post.selftext_html}
					FormattedHTML(html={post.selftext_html})
				{#if post.format === 'crosspost'}
					PostLink(post_id={post.crosspost_parent} show_subreddit={true})
				{:else if post.format === 'image'}
					{#each post.media as media, i}
						figure.post-figure
							a(href={media.image_url} rel='external noreferrer preconnect' target='_blank')
								picture
									{#if !media.is_gif}
										{#if media.image_url_960}
											source(srcset='{media.image_url_960} 2x')
										{#if media.image_url_640}
											source(srcset='{media.image_url_640} 1x')
									img.post-image(alt='image {i + 1} of {post.media.length}' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}")
							div(style='display:flex; align-items:center; justify-content:space-between; width:100%')
								figcaption.post-image-caption
									{#if media.caption_text}
										p {media.caption_text}
									{#if media.caption_url}
										a(href={relativize_url(media.caption_url)}) {relativize_url(media.caption_url)}
								menu.post-content-actions(style='width: auto;gap:1ch')
									data {i + 1} / {post.media.length}
									Button(key='e' link={media.image_url} new_tab={true} text='Enlarge')
				{:else if post.format === 'link'}
					{#if post.url}
						{#if html_embeds(post)}
							{@const embed = html_embeds(post)}
								{@html embed.html}
								{#if embed.script === 'imgur'}
									script(defer='true' src='https://s.imgur.com/min/embed.js')
								{:else if embed.script === 'twitter'}
									script(defer='true' src='https://platform.twitter.com/widgets.js')
								menu.post-content-actions
									Button(key='e' link={relativize_url(post.url)} new_tab={true} text={embed.action_description})
						{:else if iframe_embeds(post.url)}
							{@const embed = iframe_embeds(post.url)}
								<!-- svelte wants iframe "title" attribute, which interferes with fullscreen playback (tooltip obscuring screen) and anyway provides no additional info here beyond what's in the URL -->
								<!-- svelte-ignore a11y-missing-attribute -->
								iframe.post-iframe(allow={embed.iframe_allow} allowfullscreen='true' src={embed.iframe_url} style="aspect-ratio: {embed.iframe_aspect_ratio}")
								menu.post-content-actions
									Button(key='e' link={relativize_url(post.url)} new_tab={true} text={embed.iframe_action_description})
						{:else}
							.md.post-link
								a(href={relativize_url(post.url)} rel='external noopener preconnect') {relativize_url(post.url)}
							menu.post-content-actions
								Button(key='e' link={relativize_url(post.url)} new_tab={true} text='Open link')
				{:else if post.format === 'prediction'}
					ol.md.post-predictions
						{#each post.tournament_data.predictions as prediction}
							strong.post-prediction-title {prediction.title}
							dl.post-prediction-options
								{#each prediction.options as option}
									li.post-prediction-option
										dt
											meter(max={prediction.total_stake_amount} min={0} value={option.total_amount})
										dd {option.text}
					menu.post-content-actions
						Button(key='e' link={post.url} new_tab={true} text='Vote on Reddit')
				{:else if post.format === 'video'}
					{@const media = post.media[0]}
						MediaPlayer(audio_url={media.video_audio_url} height={Math.ceil(480 / media.video_aspect_ratio)} mimic_gif={media.video_is_gif} video_url={media.video_url} width={480})
		section.post-comments
			menu.post-comments-sort-controls
				Button(action={value => internal_navigate({ href: location.origin + format_url({ post_comments_sort: value, post_id: id, subreddit_name: post.subreddit }) })} disabled={!post.num_comments} options={post.discussion_type === 'CHAT' ? comments_sort_options_chat : post.contest_mode ? comments_sort_options_contest : comments_sort_options} selected={comments_sort})
				{#if comments_sort === 'new'}
					PostCommentsAutorefreshButton(count={comments_initial_count} post_id={id})
			{#if !post.num_comments}
				p.post-comments-notification-empty [ No comments. ]
			{:else}
				{#key comments_sort}
					PostComments(focus_comment_parent_count={focus_comment_parent_count} focus_comment_id={focus_comment_id} initial_count={comments_initial_count} post_id={id} sort={comments_sort})
{:else if loading}
	article.post.post-loading Loading...

style.
	.post
		padding 2em 0
		padding-left 120px
		width 720px
		&.post-loading
			padding 10px
		&.post-unavailable
			background salmon
			border-radius 10px
			color white
			padding 10px
	.post-comments-notification-empty
		color var(--c-text-weak)
		padding 12px
	.post-content
		align-items flex-start
		display flex
		flex-flow column nowrap
		gap 1.333em
		margin 1.333em 0
		padding 0 12px
		width 480px
		&.post-content-empty
			margin-bottom 0
		&.post-content-incomplete
			align-items center
			background darkkhaki
			border-radius 10px
			color white
			flex-flow row nowrap
			justify-content space-between
			padding 10px
		&.post-content-unavailable
			align-items center
			background salmon
			border-radius 10px
			color white
			flex-flow row nowrap
			justify-content space-between
			padding 10px
		:global(& iframe, & img, & .media-player)
			margin-inline-start -12px
			max-width none
			width calc(100% + 24px)
		:global(& .twitter-tweet)
			margin 0 !important
	.post-content-actions
		align-items center
		display flex
		gap 1em
		justify-content space-between
		margin-top 6px
		width 100%
	.post-figure
		display flex
		flex-flow column nowrap
		gap 6px
		width 100%
	.post-header
		align-items flex-start
		display flex
		flex-flow column nowrap
		gap 6px
		padding 0 12px
		position relative
		width 480px
	.post-iframe
		background black
	.post-image-caption
		color var(--c-text-weak)
		font-size 12px
	.post-metadata
		align-items center
		color var(--c-text-weak)
		display flex
		gap 6px
		justify-content space-between
		width 100%
	.post-predictions
		display flex
		flex-flow column nowrap
		gap 1em
	.post-prediction-option
		align-items center
		display flex
		gap 1em
		& meter
			width 200px
	.post-score
		color var(--c-text-weak)
		font-size 1.5em
		line-height 1.2
		position absolute
		right calc(100% + 1rem)
		.post-upvoted &
			color salmon
		.post-downvoted &
			color var(--c-text-faint)
	.post-title
		font-size 1.5em
		font-weight var(--f-wght-xstrong)
		letter-spacing -0.333px
		line-height 1.2
		margin 0
		overflow-wrap anywhere