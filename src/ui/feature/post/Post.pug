script.
	import { getContext } from 'svelte';
	import api from '../../../api/index.js'
	import { Time } from '../../../lib/index.js'

	import Button from '../../common/Button.pug'
	import ButtonGroup from '../../common/ButtonGroup.pug'
	import MediaPlayer from '../../common/MediaPlayer.pug'
	import TextHTML from '../../common/TextHTML.pug'
	
	import ListingNameTag from '../listing/ListingNameTag.pug'
	
	import PostCommentList from './PostCommentList.pug'
	import PostHeadline from './PostHeadline.pug'

	import html_embeds from './embed/html_embeds.coffee'
	import iframe_embeds from './embed/iframe_embeds.coffee'
	
	export comments_sort = 'best'
	export focus_comment_context_level = null
	export focus_comment_short_id = null
	export short_id = null
	comments_sort_options = [
		{
			label: 'Best'
			value: 'best'
		}
		{
			label: 'Top'
			value: 'top'
		}
		{
			label: 'Q&A'
			value: 'qa'
		}
		{
			label: 'Old'
			value: 'old'
		}
		{
			label: 'New'
			value: 'new'
		}
		{
			label: 'Controversial'
			value: 'controversial'
		}
	]
	error = null
	loading = false
	post = null
	set_theme_color = getContext('set_theme_color')
	api.loadWatch(api.ID('post', short_id),
		(x) ->
			{ data: post, error, loading } = x
			if post?.subreddit
				api.loadWatch(api.ID('subreddit', post.subreddit), ({ data: subreddit }) ->
					set_theme_color(subreddit?.primary_color ? subreddit?.key_color)
				)
			if post?.num_comments? and post?.score?
				localStorage['visited.' + short_id] = "#{Time.unixMs()} #{post.num_comments} #{post.score}"
	)

svelte:head
	{#if post}
		title r/{post.subreddit} - {post.title}
article.post
	{#if error}
		.post-unavailable-reason
			{#if error instanceof api.errors.ServerBadRequestError && error.code === 403}
				| Post subreddit is not accessible (likely private or banned).
			{:else}
				| Post unavailable for unknown reasons.
	{:else if loading}
		.post-loading-message Loading...
	{:else if post}
		{#if post.removed_by_category}
			.post-unavailable-reason
				{#if post.removed_by_category === 'author' || post.removed_by_category === 'deleted'}
					| Deleted by author.
				{:else if post.removed_by_category === 'moderator'}
					| Removed by a moderator.
				{:else if post.removed_by_category === 'reddit'}
					| Removed by Reddit spam filter.
				{:else if post.removed_by_category === 'content_takedown'}
					| Removed by Reddit due to violating
					a(href='https://www.redditinc.com/policies/content-policy') site policy.
				{:else if post.removed_by_category === 'copyright_takedown'}
					| Removed by Reddit due to a copyright notice.
				{:else}
					| Removed by Reddit, reason not specified.
		{#if focus_comment_short_id}
			section.post-content-incomplete
				| Viewing a single comment thread.
				Button(link='/r/{post.subreddit}/post/{short_id}' text='View complete post')
		{:else}
			section.post-content
				{#if post.format === 'self'}
					{#if !post.selftext.length}
						.post-selftext-empty
				{:else if post.format === 'prediction'}
					ol.post-predictions
						{#each post.tournament_data.predictions as prediction}
							h2.post-prediction-title {prediction.title}
							dl.post-prediction-options
								{#each prediction.options as option}
									li
										dt
											meter(max={prediction.total_stake_amount} min={0} value={option.total_amount})
										dd {option.text}
				{:else if post.format === 'media'}
					{#if post.media.length > 1}
						ol.post-gallery
							{#each post.media as media, index}
								figure.post-gallery-item
									a(href={media.image_url} rel='external noreferrer preconnect' target='_blank')
										picture
											source(srcset={media.image_url_960})
											img.post-image.post-gallery-image(alt='image {index + 1} of {post.media.length} in gallery' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}; width: {480 * Math.sqrt(media.aspect_ratio)}px")
									{#if media.caption_text || media.caption_url}
										figcaption.post-gallery-image-caption
											{#if media.caption_text}
												p {media.caption_text}
											{#if media.caption_url}
												a(href={media.caption_url}) {media.caption_url}
					{:else if post.media.length === 1}
						{@const media = post.media[0]}
							{#if media.video_url}
								MediaPlayer(audio_url={media.video_audio_url} dimensions={[560, 315]} mimic_gif={media.is_gif} video_url={media.video_url})
							{:else if media.image_url}
								a(href={media.image_url} rel='external noreferrer preconnect' target='_blank')
									picture
										source(srcset={media.image_url_960})
										img.post-image(alt='' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}; width: {480 * Math.sqrt(media.aspect_ratio)}px")
								menu.post-content-actions
									Button(action={() => window.open(media.image_url)} key='e' text='Enlarge')
				{:else if post.format === 'link'}
					{#if post.url}
						{#if html_embeds(post)}
							{@const embed = html_embeds(post)}
								{@html embed.html}
						{:else if iframe_embeds(post.url)}
							{@const embed = iframe_embeds(post.url)}
								<!-- svelte wants iframe "title" attribute, which interferes with fullscreen playback (tooltip obscuring screen) and anyway provides no additional info here beyond what's in the URL -->
								<!-- svelte-ignore a11y-missing-attribute -->
								iframe.post-iframe(allow={embed.iframe_allow} allowfullscreen='true' src={embed.iframe_url})
						{:else}
							.md.post-link
								a(href={post.url} rel='external noopener preconnect') {post.url}
						menu.post-content-actions
							Button(action={() => window.open(post.url)} key='e' text='Open link')
				{:else if post.format === 'crosspost'}
					PostHeadline(link={true} post_short_id={post.crosspost_parent})
				{:else}
					p [Error displaying post.]
				{#if post.selftext_html && !post.removed_by_category}
					.post-selftext
						TextHTML(html={post.selftext_html})
		section.post-comments
			{#if !focus_comment_short_id}
				h1.post-comments-label Comments
				{#if post.contest_mode}
					.post-contest-mode-notification Post is in contest mode. Comments are sorted randomly.
				{:else}
					ButtonGroup(baselink='/r/{post.subreddit}/post/{short_id}?sort=' options={comments_sort_options} selected={comments_sort})
			{#key comments_sort}
				PostCommentList(focus_comment_context_level={focus_comment_context_level} focus_comment_short_id={focus_comment_short_id} post_short_id={short_id} sort={comments_sort})
			menu.post-comments-actions
				Button(disabled={post.archived || post.locked} text='+ Add a comment...')
		nav.post-exit-button
			Button(action={() => history.back()} disabled={history.length < 2} key='Escape' text='')

style.
	.post-comments
		margin-top 30px
	.post-comments-actions
		margin-top 2em
	.post-comments-label
		color var(--c-text-weak)
		font-size 10px
		font-feature-settings 'cpsp'
		text-transform uppercase
	.post-content
		align-items flex-start
		display flex
		flex-flow column nowrap
		max-width 100%
	.post-content-actions
		display flex
		gap 1em
		padding 10px 0
	.post-content-incomplete
		align-items center
		background darkkhaki
		border-radius 10px
		color white
		display flex
		justify-content space-between
		padding 10px
	.post-contest-mode-notification
		background darkkhaki
		border-radius 10px
		color white
		padding 10px
		width 440px
	.post-exit-button
		position fixed
		left calc(50% + 320px)
		top 60px
	.post-gallery
		counter-reset gallery-index
		display flex
		flex-flow column nowrap
		gap 1px
	.post-gallery-image-caption
		color var(--c-text-weak)
		font-size 11px
		padding-left 3ch
		margin-top 5px
		&::before
			content ''
			left 0
			position absolute
	.post-gallery-item
		display flex
		flex-flow column nowrap
		gap 3px
		position relative
		&::before
			content counter(gallery-index)
			counter-increment gallery-index
			font-size 11px
			line-height 1
			position absolute
			right calc(100% + 5px)
	.post-iframe
		aspect-ratio 16/9
		border-radius 1ch
		width 510px
	.post-image
		border-radius 1ch
		min-width 480px
	.post-loading-message
		padding 10px
	.post-prediction-options > li
		display flex
	.post-selftext
		background rgba(255,255,255,0.1)
		border-radius 10px
		margin-top 20px
		max-width 660px
		padding 10px
	.post-unavailable-reason
		background salmon
		border-radius 10px
		color white
		padding 10px