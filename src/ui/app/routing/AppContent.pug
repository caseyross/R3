script.
	import { getContext } from 'svelte'
	import api from '../../../api/index.js'
	import { hotkey } from '../../common/actions/hotkeys.coffee'
	import Button from '../../common/Button.pug'
	import HotkeyLabel from '../../common/HotkeyLabel.pug'
	import TextInput from '../../common/TextInput.pug'
	import Feed from '../../feature/feed/Feed.pug'
	import Post from '../../feature/post/Post.pug'
	import SubredditNameTag from '../../feature/subreddit/SubredditNameTag.pug'
	import User from '../../feature/user/User.pug'
	import UserAvatar from '../../feature/user/UserAvatar.pug'
	import Wiki from '../../feature/wiki/Wiki.pug'

	export collection_id = null
	export feed_search_query = null
	export feed_selection_type = null
	export feed_sort = null
	export feed_time_range = null
	export feed_type = null
	export multireddit_name = null
	export post_comments_sort = null
	export post_focus_comment_parent_count = null
	export post_focus_comment_id = null
	export post_id = null
	export subreddit_name = null
	export user_name = null
	export wikipage_name = null
	export wikipage_version = null

	subreddits_subscribed = null
	unread_mention_count = 0
	unread_message_count = 0
	unread_reply_count = 0
	if api.isLoggedIn()
		api.loadWatch(api.ID('current_user_subreddits_subscribed', 100), (x) ->
			subreddits_subscribed = x?.data or []
			subreddits_subscribed.sort()
		)
		api.loadWatch('current_user_messages',
			({ comment_replies, post_replies, private_messages, username_mentions }) ->
				unread_mention_count = username_mentions?.length or 0
				unread_message_count = private_messages?.length or 0
				unread_reply_count = (post_replies?.length + comment_replies?.length) or 0
		)
	subreddits_popular = null
	api.loadWatch(api.ID('global_subreddits_popular', 25), (x) ->
		subreddits_popular = x?.data
	)
	favorites = (localStorage['favorites'] or 'x x x x x x x x x x').split(' ')
	editing_favorites = false
	tentative_favorites = null
	edit_favorites = ->
		tentative_favorites = favorites
		editing_favorites = true
	save_favorites = ->
		favorites = tentative_favorites.map((value) =>
			switch
				when value.startsWith('/u/') then return 'u_' + value[3..]
				when value.startsWith('u/') then return 'u_' + value[2..]
				when value.startsWith('/r/') then return value[3..]
				when value.startsWith('r/') then return value[2..]
				when value.startsWith('/') then return value[1..]
				else return value
		)
		localStorage['favorites'] = favorites.join(' ')
		editing_favorites = false

	getContext('set_theme_colors')()

main
	section.layout-area-left
	section.layout-area-center
		{#if wikipage_name}
			{#key subreddit_name}
				{#key wikipage_name}
					{#key wikipage_version}
						Wiki(page_name={wikipage_name} revision_id={wikipage_version} subreddit_name={subreddit_name})
		{:else if post_id}
			{#key post_id}
				{#key post_focus_comment_id}
					{#key post_focus_comment_parent_count}
						Post(comments_sort={post_comments_sort} feed_collection_id={collection_id} feed_multireddit_name={multireddit_name} feed_search_query={feed_search_query} feed_sort={feed_sort} feed_subreddit_name={subreddit_name} feed_time_range={feed_time_range} feed_type={feed_type} feed_user_name={user_name} focus_comment_parent_count={post_focus_comment_parent_count} focus_comment_id={post_focus_comment_id} id={post_id})
		{:else if feed_type === 'user'}
			{#key user_name}
				User(comments_sort={feed_sort} comments_time_range={feed_time_range} name={user_name})
		{:else if feed_selection_type === 'posts'}
			{#key collection_id}
				{#key multireddit_name}
					{#key subreddit_name}
						{#key user_name}
							{#key feed_search_query}
								{#key feed_time_range}
									{#key feed_sort}
										Feed(type={feed_type} collection_id={collection_id} multireddit_name={multireddit_name} subreddit_name={subreddit_name} user_name={user_name} search_query={feed_search_query} sort={feed_sort} time_range={feed_time_range} selected_post_id={post_id})
		{:else}
			p [ Not yet implemented. ]
	section.layout-area-right
nav#global-nav-home(style='display:none')
	section
		Button(key='h' link='/' text='Home')
		{#if api.isLoggedIn()}
			Button(badge={unread_reply_count || null} key='~' link='/mail/replies' text='Replies')
			Button(badge={unread_message_count || null} key='!' link='/mail/messages' text='Messages')
			Button(badge={unread_mention_count || null} key='@' link='/mail/mentions' text='Mentions')
	section
		TextInput(key='/' label='Search:')
	section
		h1.global-nav-home-category Favorites
		ol.global-nav-home-subreddits
			{#each [1, 2, 3, 4, 5, 6, 7, 8, 9, 0] as number, index}
				{#if favorites[index].length > 1 || editing_favorites}
					li.global-nav-home-subreddits-favorites-item
						HotkeyLabel(key={number})
						{#if editing_favorites}
							TextInput(initial_value={favorites[index].length > 1 && favorites[index]} type_action={(value) => tentative_favorites[index] = value})
						{:else}
							{#if favorites[index].length > 1}
								a(href='/{favorites[index]}' use:hotkey={number})
									SubredditNameTag(name={favorites[index]})
		{#if editing_favorites}
			Button(action={save_favorites} text='Save')
		{:else}
			Button(action={edit_favorites} text='Manage')
		{#if subreddits_subscribed}
			h2.global-nav-home-category Subscribed
			ol.global-nav-home-subreddits
				{#each subreddits_subscribed as name}
					SubredditNameTag(name={name})
		{#if subreddits_popular}
			h2.global-nav-home-category Trending
			ol.global-nav-home-subreddits
				{#each subreddits_popular as name}
					SubredditNameTag(name={name})
nav#global-nav-settings
	Button(text='Settings')
nav#global-nav-account
	{#if api.isLoggedIn()}
		UserAvatar(name={api.getUser()} size='medium')
		{#if false}
			Button(action={() => { api.logout(); localStorage.clear(); location.reload() }} text='→ Logout')
	{:else}
		Button(link={api.getLoginURL({ memoString: location.pathname })} text='Login → ')

style.
	.global-nav-home-category
		color var(--c-text-weak)
		font-size 12px
		margin 2em 0 1em
		text-transform uppercase
	.global-nav-home-subreddits
		display flex
		flex-flow column wrap
		gap 6px
	.global-nav-home-subreddits-favorites-item
		display flex
		align-items center
		gap 6px
	#global-nav-account
		bottom 0
		left 0
		padding 1em
		position fixed
	#global-nav-home
		display flex
		flex-flow column wrap
		gap 1em
		left 0
		padding 1em
		position fixed
		top 0
		width 240px
	#global-nav-settings
		bottom 0
		padding 1em
		position fixed
		right 0
	main
		display grid
		grid-template-columns 1fr 720px 1fr
		height 100dvh
		overflow auto
		width 100dvw
	.layout-area-center
		align-items center
		display flex
		flex-flow column nowrap
		height 100%
		overflow auto
		padding 2em 0
		scrollbar-width none
		&::-webkit-scrollbar
			display none
	.layout-area-left
		display flex
		height 100%
		justify-content flex-end
		overflow auto
		padding 2em 0
		scrollbar-width none
		&::-webkit-scrollbar
			display none
	.layout-area-right
		height 100%
		overflow auto
		padding 2em 0
		scrollbar-width none
		&::-webkit-scrollbar
			display none