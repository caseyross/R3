script.
	import { setContext } from 'svelte'
	import AppContexts from '../context/AppContexts.pug'
	import AppContent from './AppContent.pug'
	import AppExternalLink from './AppExternalLink.pug'
	import { parse_url } from './url.coffee'

	route = null
	
	feed_type = null
	feed_selection_type = null
	sanitized_feed_sort = null
	sanitized_feed_time_range = null
	sanitized_post_comments_sort = null

	set_route = ->
		route = Object.fromEntries(parse_url(location))
		feed_type = switch
			when route.collection_id then 'collection'
			when route.multireddit_name and route.user_name then 'multireddit'
			when route.subreddit_name then 'subreddit'
			when route.user_name then 'user'
			else null
		feed_selection_type = switch
			when false then 'about' # TODO
			when route.wikipage_name then 'wiki'
			else 'posts'
		sanitized_feed_sort = switch
			when route.feed_sort then route.feed_sort
			when feed_type is 'user' then 'new'
			when route.feed_search_query then 'relevance'
			else 'hot'
		sanitized_feed_time_range = switch
			when route.feed_time_range then route.feed_time_range
			else 'all'

	external_navigate =
		(link) -> location.href = link.href
	external_navigate_new_tab =
		(link) -> window.open(link.href)
	internal_navigate =
		(link) ->
			history.pushState(null, null, new URL(link.href))
			set_route()
	is_external_new_tab_intent =
		(link) -> link.target is '_blank'
	is_same_hash =
		(link) -> link.hash is location.hash
	is_same_origin =
		(link) -> link.origin is origin
	is_same_path =
		(link) -> link.pathname is location.pathname
	is_unmodified_event =
		(event) -> not (event.altKey or event.ctrlKey or event.metaKey or event.shiftKey)
	is_unmodified_left_click =
		(event) -> is_unmodified_event(event) and event.button is 0 and event.detail > 0
	is_unmodified_enter_key_on_link =
		(event) -> is_unmodified_event(event) and event.key is 'Enter' and event.target.tagName is 'A'

	document.addEventListener('mousedown',
		(event) ->
			if is_unmodified_left_click(event)
				link = event.target.closest('a')
				if link and link.href
					if is_same_origin(link)
						if is_same_path(link) and not is_same_hash(link) then return # allow hash change scrolling behavior
						internal_navigate(link)
					else
						if is_external_new_tab_intent(link) then external_navigate_new_tab(link)
						else external_navigate(link)
	)
	document.addEventListener('click',
		(event) ->
			if is_unmodified_left_click(event)
				link = event.target.closest('a')
				if link
					if is_same_origin(link) and is_same_path(link) and not is_same_hash(link) then return
					event.preventDefault()
	)
	document.addEventListener('keydown',
		(event) ->
			if is_unmodified_enter_key_on_link(event)
				link = event.target
				if is_same_origin(link)
					if is_same_path(link) and not is_same_hash(link) then return
					internal_navigate(link)
				else
					if is_external_new_tab_intent(link) then external_navigate_new_tab(link)
					else external_navigate(link)
				event.preventDefault()
	)

	window.addEventListener('popstate', (event) ->
		set_route()
	)

	setContext('internal_navigate', internal_navigate) # only for use in rare situations where link tags cannot be used
	
	set_route()

AppContexts
	{#if route.post_id || (route.subreddit_name && route.wikipage_name) || feed_type}
		AppContent(collection_id={route.collection_id} feed_search_query={route.feed_search_query} feed_selection_type={feed_selection_type} feed_sort={sanitized_feed_sort} feed_time_range={sanitized_feed_time_range} feed_type={feed_type} multireddit_name={route.multireddit_name} post_comments_sort={route.post_comments_sort} post_focus_comment_parent_count={route.post_focus_comment_parent_count} post_focus_comment_id={route.post_focus_comment_id} post_id={route.post_id} subreddit_name={route.subreddit_name} user_name={route.user_name} wikipage_name={route.wikipage_name} wikipage_version={route.wikipage_version})
	{:else}
		AppExternalLink(original_url={location})