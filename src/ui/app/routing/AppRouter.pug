script.
	import { setContext } from 'svelte'
	import AppContexts from '../context/AppContexts.pug'
	import AppContent from './AppContent.pug'
	import AppExternalLink from './AppExternalLink.pug'
	import { parse_url } from './url.coffee'

	route = {}
	set_route_from_current_url = ->
		# Copy route from URL, but (statefully) keep the current feed unless the new route requires a different one.
		new_route = parse_url(location)
		if !new_route.feed
			new_route.feed = route.feed
		route = new_route
	
	external_navigate =
		(link) -> location.href = link.href
	external_navigate_new_tab =
		(link) -> window.open(link.href)
	internal_navigate =
		(link) ->
			history.pushState(null, null, new URL(link.href))
			set_route_from_current_url()
	is_external_new_tab_intent =
		(link) -> link.target is '_blank'
	is_same_hash =
		(link) -> link.hash is location.hash
	is_same_origin =
		(link) -> link.origin is origin
	is_same_path =
		(link) -> link.pathname is location.pathname
	is_unmodified_event =
		(event) -> not (event.altKey or event.ctrlKey or event.metaKey or event.shiftKey)
	is_unmodified_left_click =
		(event) -> is_unmodified_event(event) and event.button is 0 and event.detail > 0
	is_unmodified_enter_key_on_link =
		(event) -> is_unmodified_event(event) and event.key is 'Enter' and event.target.tagName is 'A'

	document.addEventListener('mousedown',
		(event) ->
			if is_unmodified_left_click(event)
				link = event.target.closest('a')
				if link and link.href
					if is_same_origin(link)
						if is_same_path(link) and not is_same_hash(link) then return # allow hash change scrolling behavior
						internal_navigate(link)
					else
						if is_external_new_tab_intent(link) then external_navigate_new_tab(link)
						else external_navigate(link)
	)
	document.addEventListener('click',
		(event) ->
			if is_unmodified_left_click(event)
				link = event.target.closest('a')
				if link
					if is_same_origin(link) and is_same_path(link) and not is_same_hash(link) then return
					event.preventDefault()
	)
	document.addEventListener('keydown',
		(event) ->
			if is_unmodified_enter_key_on_link(event)
				link = event.target
				if is_same_origin(link)
					if is_same_path(link) and not is_same_hash(link) then return
					internal_navigate(link)
				else
					if is_external_new_tab_intent(link) then external_navigate_new_tab(link)
					else external_navigate(link)
				event.preventDefault()
	)
	window.addEventListener('popstate',
		(event) ->
			set_route_from_current_url()
	)

	setContext('internal_navigate', internal_navigate) # only for use in rare situations where link tags cannot be used
	set_route_from_current_url()

AppContexts
	{#if route.external}
		AppExternalLink(original_url={location})
	{:else}
		AppContent(feed={route.feed} post={route.post} wiki={route.wiki})