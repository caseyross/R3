script.
	import { afterUpdate } from 'svelte';
	import { Format } from '../../../utils/index.js'
	import AVPlayer from './AVPlayer.pug'
	import Button from '../controls/Button.pug'
	import Comment from './Comment.pug'
	import Flair from './Flair.pug'
	import Headline from './Headline.pug'
	import Minimap from '../controls/Minimap.pug'
	import Score from './Score.pug'
	import SelftextMarkup from './SelftextMarkup.pug'
	import api from '../../../api/index.js'
	export short_id = null
	export standalone = false
	DOM =
		post: null
	replies_loading = false
	post = null
	api.watch(api.ID.dataset('post', short_id), (x) ->
		{ data: post } = x
		if post?.more_replies
			api.watch(post.more_replies_id, ((x) -> { loading: replies_loading } = x), { autoload: false })
	)
	current_scroll = 0
	line_height = 21
	minimap_pattern = []
	afterUpdate ->
		content_pattern =
			if node = document.querySelector('.post-content')
				[{
					color: 'rgba(0,0,0,0.5)'
					height: Math.trunc(node.clientHeight / line_height),
					start: Math.trunc((node.getBoundingClientRect().top - DOM.post.getBoundingClientRect().top) / line_height)
				}]
			else []
		comments_pattern = Array.from(
			document.querySelectorAll('.comment-body'),
			(node) -> ({
					color: 'rgba(0,0,0,0.5)'
					height: Math.trunc(node.clientHeight / line_height),
					start: Math.trunc((node.getBoundingClientRect().top - DOM.post.getBoundingClientRect().top) / line_height)
			})
		)
		minimap_pattern = content_pattern.concat(comments_pattern)

svelte:head
	{#if standalone}
		{#if post}
			title post: {post.title}
		{:else}
			title post: {short_id}
{#if post}
	article.post(bind:this={DOM.post} on:scroll={(e) => current_scroll = e.target.scrollTop})
		{#if standalone}
			Headline(post_short_id={short_id} show_subreddit={true})
		section.post-content
			{#if post.format === 'self'}
				{#if !post.selftext.length}
					.post-selftext-empty
			{:else if post.format === 'prediction'}
				.post-predictions
					{#each post.tournament_data.predictions as prediction}
						h2.post-prediction-title {prediction.title}
						dl.post-prediction-options
							{#each prediction.options as option}
								li
									dt
										meter(max={prediction.total_stake_amount} min={0} value={option.total_amount})
									dd {option.text}
			{:else if post.format === 'media'}
				{#if post.media.length > 1}
					.post-gallery
						{#each post.media as media, index}
							figure(style='width: {media.aspect_ratio * 240}px')
								a(href={media.image_url} rel='external noopener preconnect' target='_blank')
									picture
										source(srcset={media.image_url_640})
										img.post-gallery-image(alt='image {index + 1} of {post.media.length} in gallery' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}")
								{#if media.caption_text || media.caption_url}
									figcaption.post-gallery-image-caption
										{#if media.caption_text}
											p {media.caption_text}
										{#if media.caption_url}
											a(href={media.caption_url}) {media.caption_url}
				{:else}
					{@const media = post.media[0]}
						{#if media.video_url}
							AVPlayer(audio_url={media.video_audio_url} dimensions={[640, 360]} mimic_gif={media.is_gif} video_url={media.video_url})
						{:else if media.image_url}
							a(href={media.image_url} rel='external noopener preconnect' target='_blank')
								picture
									source(srcset={media.image_url_960})
									img.post-image(alt='' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}; width: {Math.min(media.source_width, media.aspect_ratio > 1.5 ? 720 : 480)}px")
			{:else if post.format === 'embed'}
				{#each post.media as media}
					{#if media.iframe_url}
						<!-- svelte wants iframe "title" attribute, which interferes with fullscreen playback (tooltip obscuring screen) and anyway provides no additional info here beyond what's in the URL -->
						<!-- svelte-ignore a11y-missing-attribute -->
						iframe.post-iframe(allow={media.iframe_allow} allowfullscreen='true' src={media.iframe_url})
						menu.post-iframe-actions
							Button(action={() => window.open(post.url)} key='o' text='Open original')
					{:else if media.html}
						{@html media.html}
			{:else if post.format === 'link'}
				a(href={post.url} rel='external noopener preconnect') {post.url}
				menu.post-link-actions
					Button(action={() => window.open(post.url)} key='e' text='Open link')
			{:else}
				p [Error displaying post.]
			{#if post.selftext_html}
				.post-selftext
					SelftextMarkup(html={post.selftext_html})
		{#if post.replies?.length}
			{#key post.replies}
				ol.post-replies
					{#each post.replies as reply_short_id}
						Comment(short_id={reply_short_id})
					{#if post.more_replies}
						.post-more-replies
							Button(action={() => api.load(post.more_replies_id)} appearance='text' loading={replies_loading} text="+ {post.num_more_replies} more {post.num_more_replies === 1 ? 'reply' : 'replies'}...")
		.post-minimap
			Minimap(content_height={DOM.post?.scrollHeight} current_scroll={current_scroll} pattern={minimap_pattern} scroll={(y) => DOM.post.scrollTop = y} view_height={DOM.post?.offsetHeight})

style.
	.post
		height 100%
		overflow auto
		padding 5em
		width 50vw
		&::-webkit-scrollbar
			display none
	.post-content
		margin-top 2em
		position relative
	.post-gallery
		display flex
		flex-flow row wrap
		gap 1px
	.post-gallery-image
		height 240px
		&:hover
			outline solid
	.post-gallery-image-caption
		font-size 0.75em
		padding-top 0.5em
		text-align center
	.post-iframe
		aspect-ratio 16 / 9
		height 480px
	.post-iframe-actions
		display flex
		gap 1em
		margin-top 1em
	.post-image
		width 480px
		&:hover
			outline solid
	.post-link-actions
		display flex
		gap 1em
		margin-top 1em
	.post-minimap
		position fixed
		right 0
		top 6em
	.post-more-replies
		margin-top 2.25em
	.post-prediction-options > li
		display flex
	.post-replies
		margin-top 4.5em
	.post-selftext
		font-size 14px
		letter-spacing -0.006em
		line-height 20px
		margin-top 0.7em
		width 600px
	:global(.post-selftext-media)
		width 480px
		padding 1em 0