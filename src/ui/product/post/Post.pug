script.
	import ActionText from '../generic/ActionText.pug'
	import Button from '../generic/Button.pug'
	import Comment from './Comment.pug'
	import MediaPlayer from './MediaPlayer.pug'
	import PostHeader from './PostHeader.pug'
	import api from '../../../api/index.js'
	export shortId = null
	export showHeader = true
	post = null
	api.watch(api.format.datasetId('post', shortId), (x) ->
		{ data: post } = x
		if post?.user_tranches then for tranch in post.user_tranches then api.load(tranch)
	)
	galleryIndex = 0

svelte:head
	title {post ? post.title : shortId}
{#if post}
	article.post
		{#if showHeader}
			PostHeader(shortId={shortId})
		section.post-content
			{#if post.format === 'self'}
				{#if post.selftext_html}
					.post-selftext
						{@html post.selftext_html.replace(/<p>\s*(&#x200b;|&#x200B;|&nbsp;)\s*<\/p>/g, '').replace(/<p><a href="https:\/\/preview.redd.it\/(.*?)">(.*?)<\/a><\/p>/g, "<img alt='$2' class='post-selftext-media' src='https://preview.redd.it/$1' title='$2'>")}
			{:else if post.format === 'prediction'}
				.post-predictions
					{#each post.tournament_data.predictions as prediction}
						h2.post-prediction-title {prediction.title}
						dl.post-prediction-options
							{#each prediction.options as option}
								li
									dt
										meter(max={prediction.total_stake_amount} min={0} value={option.total_amount})
									dd {option.text}
			{:else if post.format === 'media'}
				{#if post.media.length > 1}
					menu.post-additional-images
						Button(action={() => galleryIndex = Math.max(0, galleryIndex - 1)} key='a' text='←')
						{#each post.media as media, index}
							Button(action={() => galleryIndex = index})
								picture
									source(srcset={media.image_url_108})
									img.post-additional-image-thumbnail(alt='thumbnail for image {index + 1} in gallery' class:post-additional-image-thumbnail-selected={galleryIndex === index} src={media.image_url} style="aspect-ratio: {media.aspect_ratio}; height: {media.aspect_ratio < 1 ? '36px' : 'auto'}; width: {media.aspect_ratio < 1 ? 'auto' : '36px'}")
						Button(action={() => galleryIndex = Math.min(post.media.length - 1, galleryIndex + 1)} key='d' text='→')
				{@const media = post.media[galleryIndex]}
					{#key media}
						figure
							{#if media.video_url}
								MediaPlayer(audio_url={media.video_audio_url} mimic_gif={media.is_gif} video_url={media.video_url})
							{:else if media.image_url}
								a(href={media.image_url} rel='external noopener preconnect' target='_blank')
									picture
										source(srcset={media.image_url_640})
										img.post-image(alt='image {galleryIndex + 1} of {post.media.length} in gallery' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}")
								{#if media.caption_text || media.caption_url}
									figcaption.post-image-caption
										{#if media.caption_text}
											p {media.caption_text}
										{#if media.caption_url}
											a(href={media.caption_url}) {media.caption_url}
								menu.post-image-actions
									Button(action={() => window.open(media.image_url)} key='e' text='Open')
									Button(action={() => window.open(media.image_url)} key='f' text='Fullscreen')
			{:else if post.format === 'embed'}
				{#each post.media as media}
					{#if media.iframe_url}
						iframe.post-iframe(allow={media.iframe_allow} allowfullscreen='true' src={media.iframe_url} title='embedded content from {post.url.hostname}')
						menu.post-iframe-actions
							Button(action={() => window.open(post.url)} key='e' text='Open')
					{:else if media.html}
						{@html media.html}
			{:else if post.format === 'link'}
				a(href={post.url} rel='external noopener preconnect') {post.url}
				menu.post-link-actions
					Button(action={() => window.open(post.url)} key='e' text='Open')
			{:else}
				p [Error displaying post.]
		{#if post.replies?.length}
			ol.post-replies
				{#each post.replies as replyId}
					Comment(id={replyId})
				{#if post.more_replies}
					.post-more-replies
						ActionText(text="+ {post.more_replies.length} more {post.more_replies.length === 1 ? 'reply' : 'replies'}...")

style.
	.post
		border-left 1px solid var(--separatorcolor)
		padding 2em 0 2em 48px
		width 480px
	.post-additional-images
		align-items flex-end
		display flex
	.post-additional-image-thumbnail
		border 3px solid rgba(0,0,0,0.1)
		width 54px
	.post-additional-image-thumbnail-selected
		border-color currentColor
	.post-content
		margin-top 2em
		position relative
	.post-iframe
		aspect-ratio 16/9
		width 100%
	.post-iframe-actions
		display flex
		gap 1em
		margin-top 1em
	.post-image
		cursor zoom-in
		margin-top 1em
		width 100%
	.post-image-actions
		display flex
		gap 1em
		margin-top 1em
	.post-image-caption
		font-size 12px
		padding 7px
	.post-link-actions
		display flex
		gap 1em
		margin-top 1em
	.post-more-replies
		margin-top 2em
	.post-replies
		padding 2em 0
	.post-prediction-options > li
		display flex
	:global(.post-selftext-media)
		margin-top 1em
		max-width 100%