script.
	import { Format } from '../../../utils/index.js'
	import Flair from '../post/Flair.pug'
	import Score from '../post/Score.pug'
	import api from '../../../api/index.js'
	export post_short_id = null
	export select = null
	export selected = false
	export show_subreddit = false
	post = null
	api.watch(api.ID.dataset('post', post_short_id), (x) -> { data: post } = x)

button.post-card(class:selected={selected} on:mousedown={() => select(post_short_id)})
	time.post-age(datetime={post.created_utc} title={post.edited ? Format.time.sAbsolute(post.created_utc) + ' (edited ' + Format.time.sAbsolute(post.edited) + ')': Format.time.sAbsolute(post.created_utc)}) {Format.time.sRelative(post.created_utc)}
	.post-score
		Score(upload_vote={(vote) => api.send(api.ID.action('vote_post', post_short_id, vote))} value={!post.hide_score && post.score} vote={post.likes == null ? 0 : post.likes ? 1 : -1})
	h1.post-title {post.title}
	div
	div
	.post-tags
		{#if show_subreddit}
			a(href='/r/{post.subreddit}') r/{post.subreddit.toLowerCase()}
		{#if post.link_flair_text}
			Flair(color={post.link_flair_background_color} rich_text={post.link_flair_richtext} text={post.link_flair_text})
	.post-info(style='display: none')
		data.post-comment-count {post.num_comments} ðŸ’¬

style.
	.post-age
		justify-self center
	.post-card
		align-items baseline
		border 1px solid transparent
		border-radius 1em 0 0 1em
		border-right 0
		color rgba(0,0,0,0.5)
		display grid
		font-size 14px
		gap 0 6px
		grid-template-columns 24px 24px 1fr
		line-height 1.5
		max-width 480px
		padding 1ch 1em
		position relative
		text-align left
		&.selected
			border-color inherit
	.post-score
		justify-self center
	.post-tags
		align-items center
		display flex
		gap 1em
	.post-title
		color black
		font-size 1em
		margin 0
		overflow-wrap anywhere