script.
	import Comment from '../post/Comment.pug'
	import ListingLayout from '../listing/ListingLayout.pug'
	import PageUnavailable from '../../infra/PageUnavailable.pug'
	import Post from '../post/Post.pug'
	import PostCard from '../post/PostCard.pug'
	import PostList from '../listing/PostList.pug'
	import api from '../../../api/index.js'
	import formatRoute from '../../infra/formatRoute.coffee'
	export items_filter = null
	export items_sort = null
	export user_name = null
	error = null
	info = null
	commentIds = null
	postIds = null
	postIndex = -1
	api.watch(api.ID.dataset('user', user_name), (x) -> { data: info, error: error } = x)
	switch items_filter
		when 'comments'
			api.watch(api.ID.dataset('user_comments', user_name, items_sort, 10), (x) -> { data: commentIds } = x)
		else
			api.watch(api.ID.dataset('user_posts', user_name, items_sort, 10), (x) -> { data: postIds } = x)

svelte:head
	title user: {user_name}: {items_filter}
{#if error}
	{#if error instanceof api.errors.ConnectionFailedError || error instanceof api.errors.InvalidRequestError}
		PageUnavailable(path='/u/{user_name}')
{:else if postIds || commentIds}
	.user-profile
		{#key postIndex}
			ListingLayout
				.user-navigation(slot='navigation')
					{#if postIds && postIndex < 0}
						PostList(ids={postIds} on:select={(event) => postIndex = event.detail.index})
					{:else if commentIds}
						ol.user-profile-comments
							{#each commentIds as id}
								Comment(id={id} showReplies={false})
				.user-selection(slot='selection')
					{#if postIndex > -1}
						Post(id={postIds[postIndex]} setPageTitle={false})
				.user-next(slot='next')
					{#if postIndex > -1 && postIndex < postIds.length - 1}
						PostCard(id={postIds[postIndex + 1]} on:select={(event) => postIndex = postIndex + 1})

style.
	.user-profile
		padding 2em 0