script.
	import api from '../../api/index.js'
	import Button from '../framework/Button.pug'
	import ListingPost from './ListingPost.pug'
	import ListingSearchField from './ListingSearchField.pug'
	import ListingSort from './ListingSort.pug'
	import ListingTimeRange from './ListingTimeRange.pug'
	export data = null
	export type = null

	{ collection_short_id, multireddit_name, page_size, post_short_id, posts_sort, search_text, subreddit_name, user_name, wiki_name, wiki_revision_id } = data
	if !page_size then page_size = 10
	if !posts_sort then posts_sort = 'hot'

	error = null
	loading = false
	subreddit_posts_lazy_load_id = null
	subreddit_posts_lazy_loadable = false
	
	switch type
		when 'collection_posts'
			type_display_name = 'Collection'
			display_name = collection_short_id
			base_path = "/c/#{collection_short_id}"
			official_path = "/collection/#{collection_short_id}"
			collection = null
			post_short_ids = null
			api.loadWatch(api.ID('collection', collection_short_id), (x) ->
				{ data: collection, error, loading } = x
				if collection
					display_name = collection.title
					post_short_ids = collection.posts
			)
		when 'multireddit_posts'
			type_display_name = 'Multireddit'
			display_name = "#{user_name}/#{multireddit_name}"
			base_path = "/m/#{user_name}/#{multireddit_name}"
			official_path = "/user/#{user_name}/m/#{multireddit_name}"
			sort_options = ['new', 'rising', 'hot', 'controversial', 'top', 'search']
			if posts_sort.split('-')[0] is 'search'
				if search_text
					if user_name is 'r'
						posts_dataset_id = api.ID('search_posts', posts_sort.split('-')[1], search_text, page_size)
					else
						posts_dataset_id = api.ID('search_posts_in_multireddit', user_name, multireddit_name, posts_sort.split('-')[1], search_text, page_size)
			else
				posts_dataset_id = api.ID('multireddit_posts', user_name, multireddit_name, posts_sort, page_size)
		when 'subreddit_posts'
			type_display_name = 'Subreddit'
			sort_options = ['new', 'rising', 'hot', 'controversial', 'top', 'search']
			if subreddit_name
				display_name = subreddit_name
				base_path = "/r/#{subreddit_name}"
				official_path = "/r/#{subreddit_name}"
				if posts_sort.split('-')[0] is 'search'
					if search_text
						posts_dataset_id = api.ID('search_posts_in_subreddit', subreddit_name, posts_sort.split('-')[1], search_text, page_size)
				else
					posts_dataset_id = api.ID('subreddit_posts', subreddit_name, posts_sort, page_size)
				subreddit = null
				api.loadWatch(api.ID('subreddit', subreddit_name), (x) ->
					{ data: subreddit } = x
					if subreddit
						display_name = subreddit.display_name
				)
			else if post_short_id
				source_post = null
				api.loadWatch(api.ID('post', post_short_id), (x) ->
					{ data: source_post } = x
					if source_post
						display_name = source_post.subreddit
						base_path = "/r/#{source_post.subreddit}"
						official_path = "/r/#{source_post.subreddit}"
						subreddit_posts_lazy_load_id = api.ID('subreddit_posts', source_post.subreddit, posts_sort, page_size)
						subreddit_posts_lazy_loadable = true
						api.watch(subreddit_posts_lazy_load_id, (x) ->
							{ data: post_short_ids, error, loading } = x
							subreddit_posts_lazy_loadable = false
						)
				)
		when 'user_posts'
			type_display_name = 'Profile'
			display_name = "u/#{user_name}"
			base_path = "/u/#{user_name}"
			official_path = "/u/#{user_name}"
			sort_options = ['new', 'hot', 'controversial', 'top']
			posts_dataset_id = api.ID('user_posts', user_name, posts_sort, page_size)

	if posts_dataset_id
		post_short_ids = null
		api.loadWatch(posts_dataset_id, (x) -> { data: post_short_ids, error, loading } = x)

nav.listing
	{#if error}
		{#if error instanceof api.errors.ServerError}
			p Content unavailable.
			a(href='https://www.reddit.com{official_path}') Visit Reddit to see why.
	{:else if loading}
		p Loading...
	{:else}
		header
			{#if type_display_name && display_name}
				span.listing-type {type_display_name}:
				span.listing-name {display_name}
		{#if sort_options && !subreddit_posts_lazy_loadable}
			menu
				section(style='display: flex; gap: 2em')
					ListingSort(base_path={base_path} selection={posts_sort.split('-')[0]} sort_options={sort_options})
					{#if ['top', 'controversial', 'search'].includes(posts_sort.split('-')[0])}
						ListingTimeRange(base_path={base_path + '/' + posts_sort.split('-')[0]} selection={posts_sort.split('-')[1]})
				{#if posts_sort.split('-')[0] === 'search'}
					ListingSearchField(base_path={base_path + '/' + posts_sort} initial_query={search_text})
		hr
		section.listing-content
			{#if post_short_ids}
				ol.listing-posts
					{#each post_short_ids as post_short_id}
						ListingPost(short_id={post_short_id} show_subreddit={type !== 'subreddit_posts'})
			{:else if subreddit_posts_lazy_loadable}
				Button(action={() => api.load(subreddit_posts_lazy_load_id)} text='Load posts')
		hr(style='margin: 0 0 1em 0')
		footer
			Button(text='+')

style.
	.listing
		display flex
		flex-flow column nowrap
		height 100vh
		padding 20px
		width 400px
		header
			align-items baseline
			display flex
			gap 1em
			margin-bottom 1em
	.listing-content
		flex 1
		overflow-y auto
		&::-webkit-scrollbar
			display none
	.listing-posts
		display flex
		flex-flow column nowrap
		gap 1ch