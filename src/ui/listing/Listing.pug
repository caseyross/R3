script.
	import api from '../../api/index.js'
	import Button from '../input/Button.pug'
	import Headline from '../post/Headline.pug'
	import SearchInput from './SearchInput.pug'
	import SortPicker from './SortPicker.pug'
	import TimeRangePicker from './TimeRangePicker.pug'
	import Unavailable from '../error/Unavailable.pug'
	export collection_short_id = null
	export name = null
	export page_size = 10
	export search_text = null
	export sort = null
	export type = 'subreddit'
	export user_name = null
	collection = null
	error = null
	post_short_ids = null
	switch type
		when 'collection'
			application_path = "/c/#{collection_short_id}"
			display_name = "collection/#{collection_short_id}"
			original_path = "/collection/#{collection_short_id}"
			api.loadWatch(api.ID('collection', collection_short_id),
				(x) ->
					{ data: collection, error: error } = x
					if collection then post_short_ids = collection.posts
			)
			sorts = []
		when 'multireddit'
			application_path = "/m/#{user_name}/#{name}"
			display_name = "#{user_name}/#{name}"
			original_path = "/user/#{user_name}/m/#{name}"
			posts_dataset_id = 
				if sort.split('-')[0] is 'search'
					if search_text then api.ID('search_posts_in_multireddit', user_name, name, sort.split('-')[1], search_text, page_size)
					else null
				else
					api.ID('multireddit_posts', user_name, name, sort, page_size)
			sorts = ['new', 'rising', 'hot', 'controversial', 'top', 'search']
		when 'special_multireddit'
			if name is 'frontpage'
				application_path = ''
				posts_dataset_id = api.ID('multireddit_posts', 'r', 'home', sort, page_size)
				sorts = ['new', 'rising', 'hot', 'controversial', 'top', 'best']
			else
				application_path = "/#{name}"
				posts_dataset_id =
					if sort.split('-')[0] is 'search'
						if search_text then api.ID('search_posts', sort.split('-')[1], search_text, page_size)
						else null
					else
						api.ID('multireddit_posts', name.split('/')[0], name.split('/')[1], sort, page_size)
				sorts = switch name
					when 'r/all' then ['new', 'rising', 'hot', 'controversial', 'top', 'search']
					when 'r/popular' then ['new', 'rising', 'hot', 'controversial', 'top', 'geo']
			display_name = name
			original_path = application_path
		when 'subreddit'
			application_path = "/r/#{name}"
			display_name = name
			original_path = "/r/#{name}"
			posts_dataset_id =
				if sort.split('-')[0] is 'search'
					if search_text then api.ID('search_posts_in_subreddit', name, sort.split('-')[1], search_text, page_size)
					else null
				else
					api.ID('subreddit_posts', name, sort, page_size)
			sorts = ['new', 'rising', 'hot', 'controversial', 'top', 'search']
		when 'user_profile'
			application_path = "/u/#{user_name}"
			display_name = "u/#{user_name}"
			original_path = "/u/#{user_name}"
			posts_dataset_id = api.ID('user_posts', user_name, sort, page_size)
			sorts = ['new', 'hot', 'controversial', 'top']
	if posts_dataset_id
		page_selection = 1
		api.loadWatch(posts_dataset_id,
			(x) -> { data: post_short_ids, error: error } = x
		)

{#if error}
	{#if error instanceof api.errors.ServerError}
		Unavailable(path='/r/{name}')
{:else}
	main.listing
		nav.listing-nav
			header
				h1 more in {display_name}
			{#if sort}
				menu
					section(style='display: flex; gap: 2em')
						SortPicker(base_path={application_path} selection={sort.split('-')[0]} sorts={sorts})
						{#if ['top', 'controversial', 'search'].includes(sort.split('-')[0])}
							TimeRangePicker(base_path={application_path + '/' + sort.split('-')[0]} selection={sort.split('-')[1]})
					{#if sort.split('-')[0] === 'search'}
						SearchInput(base_path={application_path + '/' + sort} initial_query={search_text})
			hr
			section.listing-tab-content
				ol.post-list
					{#if post_short_ids}
						{#each post_short_ids as short_id}
							Headline(post_short_id={short_id} show_subreddit={type.endsWith('multireddit')})
			hr(style='margin: 0 0 1em 0')
			footer
				section.listing-tab-content-pages
					Button(text='+')

style.
	.listing
		height 100vh
		width 560px
	.listing-nav
		border-radius 5px
		display flex
		flex-flow column nowrap
		height 100vh
		padding 40px
		width 400px
		header
			align-items baseline
			display flex
			gap 1em
			margin-bottom 1em
	.listing-tab-content
		flex 1
		overflow-y auto
		&::-webkit-scrollbar
			display none
	.post-list
		display flex
		flex-flow column nowrap
		gap 1ch