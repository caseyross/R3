script.
	import { Time } from '../../utils/index.js'
	import api from '../../api/index.js'
	import Button from '../controls/Button.pug'
	import CommentList from './CommentList.pug'
	import Markup from '../text/Markup.pug'
	import PageUnavailable from '../errors/PageUnavailable.pug'
	import Post from '../post/Post.pug'
	import PostList from './PostList.pug'
	import TimeRangePicker from './TimeRangePicker.pug'
	export name = null
	export page_size = 10
	export search_text = null
	export sort = null
	export tab_selection = 'posts'
	export type = 'subreddit'
	export user_name = null
	comment_short_ids = null
	error = null
	info = null
	post_short_ids = null
	post_selection = null
	rules = null
	switch type
		when 'multireddit'
			display_name = if user_name is 'r' then name else "#{user_name}/#{name}"
			info_dataset_id = if user_name is 'r' then null else api.ID.dataset('multireddit', user_name, name)
			original_path = "/user/#{user_name}/m/#{name}"
			posts_dataset_id = api.ID.dataset('multireddit_posts', user_name, name, sort, page_size)
			tabs = ['posts', 'about']
			title = if user_name is 'r' and name is 'home' then 'frontpage' else "multi: #{user_name}/#{name}"
		when 'subreddit'
			localStorage["meta.last_visit.#{name.toLowerCase()}"] = Time.epochMs()
			display_name = name
			info_dataset_id = api.ID.dataset('subreddit', name)
			original_path = "/r/#{name}"
			posts_dataset_id =
				if sort.split('-')[0] is 'search'
					api.ID.dataset('search_posts_in_subreddit', name, sort.split('-')[1], search_text, page_size)
				else
					api.ID.dataset('subreddit_posts', name, sort, page_size)
			rules_dataset_id = api.ID.dataset('subreddit_rules', name)
			tabs = ['posts', 'about', 'rules']
			title = "subreddit: #{name}"
		when 'user_profile'
			comments_dataset_id = api.ID.dataset('user_comments', user_name, sort, page_size)
			display_name = "u/#{user_name}"
			info_dataset_id = api.ID.dataset('user', user_name)
			original_path = "/u/#{user_name}"
			posts_dataset_id = api.ID.dataset('user_posts', user_name, sort, page_size)
			tabs = ['posts', 'comments', 'about']
			title = "user: #{user_name}"
	if comments_dataset_id
		page_selection = 1
		api.watch(comments_dataset_id, (x) -> { data: comment_short_ids, error: error } = x)
	if info_dataset_id
		api.watch(info_dataset_id, (x) -> { data: info, error: error } = x)
	if posts_dataset_id
		page_selection = 1
		api.watch(posts_dataset_id, (x) -> { data: post_short_ids, error: error } = x)
	if rules_dataset_id
		api.watch(rules_dataset_id, (x) -> { data: rules, error: error } = x)

svelte:head
	title {title}
{#if error}
	{#if error instanceof api.errors.ServerError}
		PageUnavailable(path='/r/{name}')
{:else}
	nav.listing
		header
			h1 {display_name}
		{#if tabs}
			section.listing-tabs
				{#each tabs as tab}
					Button(action={() => tab_selection = tab} activated={tab_selection === tab} text={tab})
		TimeRangePicker(selection={sort.split('-')[1]})
		hr
		section.listing-tab-content
			{#if tab_selection === 'about'}
				{#if info}
					{#if type === 'subreddit'}
						.subreddit-description
							Markup(html={info.description_html})
			{:else if tab_selection === 'comments'}
				{#if comment_short_ids}
					CommentList(short_ids={comment_short_ids})
			{#if tab_selection === 'posts'}
				{#if post_short_ids}
					PostList(multireddit={type === 'multireddit'} short_ids={post_short_ids} select={short_id => post_selection = short_id} selection={post_selection})
			{:else if tab_selection === 'rules'}
				{#if rules}
					ol.subreddit-rules
						{#each rules.rules as rule}
							li
								details
									summary.subreddit-rule-name {rule.short_name}
									.subreddit-rule-description
										Markup(html={rule.description_html})
		{#if tab_selection === 'comment' || tab_selection === 'posts'}
			hr(style='margin: 0 0 1em 0')
			section.listing-tab-content-pages
				p Page {page_selection}
	{#if post_selection}
		{#key post_selection}
			Post(short_id={post_selection})

style.
	.listing
		background white
		border-radius 5px
		display flex
		flex-flow column nowrap
		max-height 90%
		padding 10px
		position relative
		top 5%
		width 450px
	.listing-tabs
		display flex
		gap 1ch
	.listing-tab-content
		flex 1
		overflow-y auto
		&::-webkit-scrollbar
			display none
	.subreddit-description
		padding 10px
	.subreddit-rules
		padding 10px 30px
	.subreddit-rule-name
		color var(--color-writing-action)
		font-weight bold
	.subreddit-rule-description
		padding 1em