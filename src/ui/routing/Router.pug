script.
	import { setContext } from 'svelte'

	import { parse_url } from './url.coffee'

	import AllGlobals from '../component/global/AllGlobals.pug'
	import Collection from '../component/collection/Collection.pug'
	import Multireddit from '../component/multireddit/Multireddit.pug'
	import Post from '../component/post/Post.pug'
	import Subreddit from '../component/subreddit/Subreddit.pug'
	import Unsupported from './Unsupported.pug'
	import User from '../component/user/User.pug'
	import Wiki from '../component/wiki/Wiki.pug'

	feed = null
	page = null
	post = null
	scroll_cache = {}
	subpage = null
	wiki = null
	
	external_navigate =
		(link) -> location.href = link.href
	external_navigate_new_tab =
		(link) -> window.open(link.href)
	internal_navigate =
		(link) ->
			history.pushState(null, null, new URL(link.href))
			set_route_from_current_url()
	is_external_new_tab_intent =
		(link) -> link.target is '_blank'
	is_same_hash =
		(link) -> link.hash is location.hash
	is_same_origin =
		(link) -> link.origin is origin
	is_same_path =
		(link) -> link.pathname is location.pathname
	is_unmodified_enter_key_on_link =
		(event) -> is_unmodified_event(event) and event.key is 'Enter' and event.target.tagName is 'A'
	is_unmodified_event =
		(event) -> not (event.altKey or event.ctrlKey or event.metaKey or event.shiftKey)
	is_unmodified_left_click =
		(event) -> is_unmodified_event(event) and event.button is 0 and event.detail > 0
	restore_scroll_for_current_url =
		->
			window.scrollTo({
				behavior: 'instant'
				top: scroll_cache[scroll_cache_key(location)] or 0 # still needs to be reset to 0 if no cached position (because SPA)
			})
	save_scroll_for_current_url =
		->
			scroll_cache[scroll_cache_key(location)] = window.scrollY
	scroll_cache_key =
		(url) -> url.pathname + '?' + url.search + '#' + url.hash
	set_route_from_current_url =
		->
			{ feed, page, post, subpage, wiki } = parse_url(location)
			restore_scroll_for_current_url()

	document.addEventListener('mousedown',
		(event) ->
			if is_unmodified_left_click(event)
				link = event.target.closest('a')
				if link and link.href
					if is_same_origin(link)
						if is_same_path(link) and not is_same_hash(link) then return # allow hash change scrolling behavior
						internal_navigate(link)
					else
						if is_external_new_tab_intent(link) then external_navigate_new_tab(link)
						else external_navigate(link)
	)
	document.addEventListener('click',
		(event) ->
			if is_unmodified_left_click(event)
				link = event.target.closest('a')
				if link
					if is_same_origin(link) and is_same_path(link) and not is_same_hash(link) then return
					event.preventDefault()
	)
	document.addEventListener('keydown',
		(event) ->
			if is_unmodified_enter_key_on_link(event)
				link = event.target
				if is_same_origin(link)
					if is_same_path(link) and not is_same_hash(link) then return
					internal_navigate(link)
				else
					if is_external_new_tab_intent(link) then external_navigate_new_tab(link)
					else external_navigate(link)
				event.preventDefault()
	)
	window.addEventListener('popstate',
		(event) ->
			set_route_from_current_url()
	)
	window.addEventListener('scroll',
		(event) ->
			requestIdleCallback(->
				save_scroll_for_current_url()
			)
	)

	setContext('internal_navigate', internal_navigate) # only for use in rare situations where link tags cannot be used
	set_route_from_current_url()

AllGlobals
	{#if page === 'collection'}
		{#key feed.collection_id}
			Collection(id={feed.collection_id} subreddit_name={feed.subreddit_name} tab={subpage})
	{:else if page === 'multireddit'}
		{#key feed.multireddit_name}
			{#key feed.user_name}
				Multireddit(after_id={feed.after_id} filter={feed.filter} multireddit_name={feed.multireddit_name} search={feed.search} sort={feed.sort} tab={subpage} time_range={feed.time_range} user_name={feed.user_name})
	{:else if page === 'post'}
		{#key post.id}
			{#key post.focus_comment_id}
				{#key post.focus_comment_parent_count}
					Post(comments_sort={post.comments_sort} expanded={true} focus_comment_parent_count={post.focus_comment_parent_count} focus_comment_id={post.focus_comment_id} id={post.id})
	{:else if page === 'subreddit'}
		{#key feed.subreddit_name}
			Subreddit(after_id={feed.after_id} filter={feed.filter} name={feed.subreddit_name} search={feed.search} sort={feed.sort} tab={subpage} time_range={feed.time_range})
	{:else if page === 'user'}
		{#key feed.user_name}
			User(after_id={feed.after_id} after_id_type={feed.after_id_type} filter={feed.filter} name={feed.user_name} sort={feed.sort} tab={subpage} time_range={feed.time_range})
	{:else if page === 'wiki'}
		{#key wiki.subreddit_name}
			{#key wiki.page_name}
				{#key wiki.page_version}
					Wiki(page_name={wiki.page_name} revision_id={wiki.page_version} subreddit_name={wiki.subreddit_name})
	{:else}
		Unsupported(url={location})