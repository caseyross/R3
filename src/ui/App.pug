script.
	import { setContext } from 'svelte'

	import { parse_url } from './url/index.js'
	
	import AccountProviderOverlay from './overlay/AccountProviderOverlay.pug'
	import NetworkStatusOverlay from './overlay/NetworkStatusOverlay.pug'
	import RadialMenuOverlay from './overlay/RadialMenuOverlay.pug'
	import TableManagerOverlay from './overlay/TableManagerOverlay.pug'
	import ThemeProviderOverlay from './overlay/ThemeProviderOverlay.pug'
	
	import AppRoute from './AppRoute.pug'
	import AppRouteHomepage from './AppRouteHomepage.pug'
	import AppRouteUnsupported from './AppRouteUnsupported.pug'
	
	route = {}
	scroll_cache = {}
	
	external_navigate =
		(link) -> location.href = link.href
	external_navigate_new_tab =
		(link) -> window.open(link.href)
	internal_navigate =
		(link) ->
			history.pushState(null, null, new URL(link.href))
			set_route_from_current_url()
	is_external_new_tab_intent =
		(link) -> link.target is '_blank'
	is_same_hash =
		(link) -> link.hash is location.hash
	is_same_origin =
		(link) -> link.origin is origin
	is_same_path =
		(link) -> link.pathname is location.pathname
	is_unmodified_enter_key_on_link =
		(event) -> is_unmodified_event(event) and event.key is 'Enter' and event.target.tagName is 'A'
	is_unmodified_event =
		(event) -> not (event.altKey or event.ctrlKey or event.metaKey or event.shiftKey)
	is_unmodified_left_click =
		(event) -> is_unmodified_event(event) and event.button is 0 and event.detail > 0
	restore_scroll_for_current_url =
		->
			window.scrollTo({
				behavior: 'instant'
				top: scroll_cache[scroll_cache_key(location)] or 0 # still needs to be reset to 0 if no cached position (because SPA)
			})
	save_scroll_for_current_url =
		->
			scroll_cache[scroll_cache_key(location)] = window.scrollY
	scroll_cache_key =
		(url) -> url.pathname + '#' + url.hash
	set_route_from_current_url =
		->
			route = parse_url(location)
			restore_scroll_for_current_url()

	document.addEventListener('mousedown',
		(event) ->
			if is_unmodified_left_click(event)
				link = event.target.closest('a')
				if link and link.href
					if is_same_origin(link)
						if is_same_path(link) and not is_same_hash(link) then return # allow hash change scrolling behavior
						internal_navigate(link)
					else
						if is_external_new_tab_intent(link) then external_navigate_new_tab(link)
						else external_navigate(link)
	)
	document.addEventListener('click',
		(event) ->
			if is_unmodified_left_click(event)
				link = event.target.closest('a')
				if link
					if is_same_origin(link) and is_same_path(link) and not is_same_hash(link) then return
					event.preventDefault()
	)
	document.addEventListener('keydown',
		(event) ->
			if is_unmodified_enter_key_on_link(event)
				link = event.target
				if is_same_origin(link)
					if is_same_path(link) and not is_same_hash(link) then return
					internal_navigate(link)
				else
					if is_external_new_tab_intent(link) then external_navigate_new_tab(link)
					else external_navigate(link)
				event.preventDefault()
	)
	window.addEventListener('popstate',
		(event) ->
			set_route_from_current_url()
	)
	window.addEventListener('scroll',
		(event) ->
			requestIdleCallback(->
				save_scroll_for_current_url()
			)
	)

	setContext('internal_navigate', internal_navigate) # only for use in rare situations where link tags cannot be used
	set_route_from_current_url()

ThemeProviderOverlay
	NetworkStatusOverlay
		AccountProviderOverlay
			RadialMenuOverlay
				TableManagerOverlay
					{#if route.feed || route.post || route.wiki}
						{#if route.feed?.type === 'subreddits'}
							AppRouteHomepage(filter={route.feed.filter})
						{:else}
							AppRoute(feed={route.feed} post={route.post} wiki={route.wiki})
					{:else}
						AppRouteUnsupported(url={location})