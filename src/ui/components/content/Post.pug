script.
	import api from '../../../api/index.js'
	import Time from '../../../lib/Time.coffee'
	import StringFormat from '../../tools/StringFormat.coffee'
	import ActionText from '../system/ActionText.pug'
	import Button from '../system/Button.pug'
	import MediaPlayer from '../system/MediaPlayer.pug'
	import Avatar from './Avatar.pug'
	import Comment from './Comment.pug'
	import Score from './Score.pug'
	export id = null
	post = null
	api.watch(
		id
		(x) ->
			{ data: post } = x
			if post.user_info_tranches then for tranch in post.user_info_tranches then api.load(tranch)
	)
	galleryIndex = 0

{#if post}
	article.post
		header.post-header
			.post-flair {post.link_flair_text}
			h1.post-title {post.title}
			.post-info
				.post-time
					Score(value={post.hide_score || post.score})
					span.post-upvote-percent ({StringFormat.percentage(post.upvote_ratio)}% upvoted)
					{#if post.edited}
						span.post-edit-date(title='Posted {StringFormat.date(Time.sToMs(post.created_utc))}') Edited {StringFormat.date(Time.sToMs(post.edited))}
					{:else}
						span.post-create-date Posted {StringFormat.date(Time.sToMs(post.created_utc))}
				.post-author
					Avatar(username={post.author})
		section.post-content
			{#if post.format === 'self'}
				{#if post.selftext_html}
					.post-selftext
						{@html StringFormat.postBody(post.selftext_html)}
			{:else if post.format === 'prediction'}
				.post-predictions
					{#each post.tournament_data.predictions as prediction}
						h2.post-prediction-title {prediction.title}
						dl.post-prediction-options
							{#each prediction.options as option}
								li
									dt
										meter(max={prediction.total_stake_amount} min={0} value={option.total_amount})
									dd {option.text}
			{:else if post.format === 'media'}
				{@const media = post.media[galleryIndex]}
					figure
						{#if media.video_url}
							MediaPlayer(audio_url={media.video_audio_url} mimic_gif={media.gif_url} video_aspect_ratio={media.aspect_ratio} video_url={media.video_url})
						{:else if media.gif_url || media.image_url}
							a(href={media.gif_url || media.image_url} rel='external noopener preconnect' target='_blank')
								picture
									{#if media.gif_url}
										img.post-image(src={media.gif_url} style="aspect-ratio: {media.aspect_ratio}; height: {media.aspect_ratio < 1 ? '480px' : 'auto'}; width: {media.aspect_ratio < 1 ? 'auto' : '480px'}")
									{:else if media.image_url}
										source(srcset={media.image_url_640})
										img.post-image(src={media.image_url} style="aspect-ratio: {media.aspect_ratio}; height: {media.aspect_ratio < 1 ? '480px' : 'auto'}; width: {media.aspect_ratio < 1 ? 'auto' : '480px'}")
							{#if media.caption_text || media.caption_url}
								figcaption.post-image-caption
									{#if media.caption_text}
										p {media.caption_text}
									{#if media.caption_url}
										a(href={media.caption_url}) {media.caption_url}
							menu.post-image-actions
								Button(action={() => window.open(media.image_url)} key='e' text='Open')
								Button(action={() => window.open(media.image_url)} key='f' text='Fullscreen')
				{#if post.media.length > 1}
					menu.post-additional-images
						{#each post.media as media, index}
							button(on:click={() => galleryIndex = index})
								picture
									source(srcset={media.image_url_108})
									img.post-additional-image-thumbnail(class:post-additional-image-thumbnail-selected={galleryIndex === index} src={media.image_url} style="aspect-ratio: {media.aspect_ratio}; height: {media.aspect_ratio < 1 ? '36px' : 'auto'}; width: {media.aspect_ratio < 1 ? 'auto' : '36px'}")
						Button(action={() => galleryIndex = Math.max(0, galleryIndex - 1)} key='t' text='↑')
						Button(action={() => galleryIndex = Math.min(post.media.length - 1, galleryIndex + 1)} key='g' text='↓')
			{:else if post.format === 'embed'}
				{#each post.media as media}
					{#if media.iframe_url}
						iframe(allowfullscreen='true' allow={media.iframe_allow} src={media.iframe_url})
						menu.post-iframe-actions
							Button(action={() => window.open(post.url)} key='e' text='Open')
					{:else if media.html}
						{@html media.html}
			{:else if post.format === 'link'}
				a(href={post.url} rel='external noopener preconnect') {post.url}
				menu.post-link-actions
					Button(action={() => window.open(post.url)} key='e' text='Open')
			{:else}
				p [Error displaying post.]
		{#if post.replies?.length}
			ol.post-replies
				{#each post.replies as replyId}
					Comment(id={replyId})
				{#if post.more_replies}
					ActionText(text='More replies...')

style.
	.post
		padding 2em 0
	.post-additional-images
		align-items flex-start
		display flex
		flex-flow column nowrap
		gap 6px
		left calc(640px + 1em)
		height 100%
		position absolute
		padding 0 2px
		overflow auto
		top 0
	.post-additional-image-thumbnail
		border 3px solid rgba(0,0,0,0.1)
		width 54px
	.post-additional-image-thumbnail-selected
		border-color currentColor
	.post-content
		margin-top 2em
		position relative
		overflow-wrap anywhere
		width 480px
	.post-header
		padding 2em 0
		width 480px
	.post-iframe-actions
		display flex
		gap 1em
		margin-top 1em
	.post-image
		cursor zoom-in
		width 480px
	.post-image-actions
		display flex
		gap 1em
		margin-top 1em
	.post-image-caption
		font-size 12px
		max-width 480px
		padding 7px
	.post-info
		display flex
		margin-top 1em
		justify-content space-between
	.post-link-actions
		display flex
		gap 1em
		margin-top 1em
	.post-replies
		padding 2em 0
	.post-predictions
		width 640px
	.post-prediction-options > li
		display flex
	:global(.post-selftext-media img)
		max-width 480px
	.post-time
		color rgba(0,0,0,0.5)
		font 12px 'roboto mono'
		letter-spacing 0
	.post-title
		align-items flex-end
		display flex
		height 5em
		font-size 1.5em
		letter-spacing 0
		line-height 1
		margin 0
		overflow-wrap anywhere
	iframe
		aspect-ratio 1
		height 480px