script.
	import Button from './Button.pug'
	import { onMount } from 'svelte'
	export audio_url = null
	export video_aspect_ratio = 1
	export video_url = null
	stati = {
		LOADING: 'LOADING...'
		LOADED: 'CLICK TO PLAY'
	}
	audio = null
	buffered = []
	duration = 0
	mouseIdle = false
	mouseIdleTimerId = null
	status = stati.LOADING
	time = 0
	video = null
	volume = 0.5
	onMount ->
		video.addEventListener('canplaythrough', (e) ->
			status = stati.LOADED
		)
		video.addEventListener('pause', (e) ->
			audio.pause()
		)
		video.addEventListener('playing', (e) ->
			audio.currentTime = video.currentTime
			audio.play().catch(() -> null) # ignore useless errors from bad API design
		)
		video.addEventListener('waiting', (e) ->
			audio.pause()
		)
	handleMousedown = (e) ->
		if e.button is 0
			if video.paused then video.play() else video.pause()
		wakeMouse()
	wakeMouse = ->
		mouseIdle = false
		clearTimeout(mouseIdleTimerId)
		mouseIdleTimerId = setTimeout(
			-> mouseIdle = true
			200
		)

video(bind:buffered={buffered} bind:duration={duration} bind:currentTime={time} bind:this={video} on:contextmenu={e => e.altKey || e.preventDefault()} on:mousedown={handleMousedown} on:mousemove={() => wakeMouse()} style="aspect-ratio: {video_aspect_ratio}; cursor: {document.fullscreenElement && document.fullscreenElement === video && mouseIdle ? 'none' : 'auto'}")
	source(src={video_url} type='video/mp4')
audio(bind:this={audio})
	source(src={audio_url} type='audio/mp4')
.video-actions
	Button(action={() => video.paused && video.play()} key='e' text='Play')
	Button(action={() => !video.paused && video.pause()} key='s' text='Pause')
	Button(action={() => time = Math.max(0, time - 3)} key='r' text='Rewind 3sec')
	Button(action={() => time = Math.min(duration, time + 3)} key='shift r' text='Forward 3sec')
	Button(action={() => video.requestFullscreen()} key='f' text='Fullscreen')
nav.video-controls
	.media-playback-container
		span.media-status {status}
		{#each buffered as region}
			span.buffer-region(style='left:{region.start/duration*100}%;width:{(region.end-region.start)/duration*100}%')
		input.media-scrubber(bind:value={time} max={duration} min={0} step={0.01} type='range')
	.video-controls-second-row
		.media-volume-container
			span.mute-region MUTE
			span.sound-region SOUND
			input.video-volume(bind:value={volume} max={1} min={-0.5} step={0.01} type='range' on:input={(e) => audio.volume = Math.clamp(0, 1, e.target.value)})
		.media-time-info
			time.media-elapsed-duration {time.toFixed(2)}
			time.media-total-duration {duration.toFixed(2)}

style.
	::-webkit-media-controls
		display none
	::-webkit-slider-thumb
		appearance none
		background black
		height 2em
		width 3px
	.buffer-region
		background lightgray
		height 10px
		position absolute
	.video-actions
		display flex
		gap 1em
		margin-top 1em
	.video-controls
		border 1px solid
		border-radius 5px
		box-sizing border-box
		padding 0 10px
		width 480px
	.video-controls-second-row
		display flex
		justify-content space-between
	.video-fullscreen-button
		background transparent
		border 1px dashed
		font-size 10px
		font-weight bold
		height 36px
		width 64px
	.media-playback-container
		align-items center
		display flex
		height 2em
		position relative
		width 100%
	.media-time-info
		align-items flex-end
		display flex
		flex-flow column nowrap
		font-family monospace
		justify-content center
		white-space pre
	.media-scrubber
		appearance none
		background transparent
		height 100%
		left 0
		position absolute
		top 0
		width 100%
	.media-status
		font-size 10px
		font-weight bold
	.media-volume-container
		align-items center
		display flex
		height 2em
		position relative
		width 160px
		::-webkit-slider-thumb
			height 1em
			width 2px
	.mute-region
		border-right 1px dotted lightgray
		flex 1
		font-size 10px
		font-weight bold
	.sound-region
		flex 2
		font-size 10px
		font-weight bold
	.video-volume
		appearance none
		background transparent
		left 0
		height 100%
		position absolute
		top 0
		width 100%
	audio
		display none
	video
		background black
		border-radius 6px
		display block
		height 360px