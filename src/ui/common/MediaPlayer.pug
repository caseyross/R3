script.
	import { onMount } from 'svelte'
	import { Time } from '../../lib/index.js'
	
	import Button from './Button.pug'
	
	export audio_url = null
	export dimensions = [480, 480]
	export mimic_gif = false
	export video_url = null

	audio = null
	buffer_regions = []
	clamp = (min, max, value) ->
		if value < min then return min
		if value > max then return max
		return value
	duration = 0
	fullscreen = false
	height = dimensions[1]
	mouse_idle = false
	mouse_idle_timer_id = null
	paused = true
	play_pause = ->
		if paused
			video.play()
		else
			video.pause()
	player = null
	set_volume = (value) ->
		audio.volume = clamp(0, 1, value)
		localStorage['media.volume'] = audio.volume
	scrobbler = null
	time = 0
	toggle_fullscreen = ->
		if fullscreen
			document.exitFullscreen()
		else
			player.requestFullscreen()
	video = null
	volume = Number(localStorage['media.volume']) or 0
	waiting_for_seek = false
	wake_mouse = ->
		mouse_idle = false
		clearTimeout(mouse_idle_timer_id)
		mouse_idle_timer_id = setTimeout(
			-> mouse_idle = true
			200
		)
	width = dimensions[0]

	onMount ->
		audio.volume = volume
		player.addEventListener('fullscreenchange', (e) ->
			if document.fullscreenElement? and document.fullscreenElement is player
				fullscreen = true
				mouse_idle = true
			else
				fullscreen = false
		)
		video.addEventListener('ended', (e) ->
			if fullscreen
				document.exitFullscreen()
		)
		video.addEventListener('mousedown', (e) ->
			if e.button is 0
				if fullscreen
					play_pause()
					wake_mouse()
				else
					player.requestFullscreen()
					video.play()
		)
		video.addEventListener('mousemove', (e) ->
			if fullscreen
				wake_mouse()
		)
		video.addEventListener('pause', (e) ->
			audio?.pause()
		)
		video.addEventListener('playing', (e) ->
			audio?.currentTime = video.currentTime
			audio?.play().catch(-> null) # ignore useless errors from bad API design
		)
		video.addEventListener('seeking', (e) ->
			waiting_for_seek = true
		)
		video.addEventListener('seeked', (e) ->
			waiting_for_seek = false
		)
		video.addEventListener('timeupdate', (e) ->
			scrobbler.value = time
		)
		video.addEventListener('waiting', (e) ->
			audio?.pause()
		)

.media-player(bind:this={player} class:media-player-controls-hidden={fullscreen && mouse_idle} style='width: {width}px')
	audio(bind:this={audio})
		source(src={audio_url} type='audio/mp4')
	<!-- svelte-ignore a11y-media-has-caption -->
	video(autoplay={mimic_gif} bind:buffered={buffer_regions} bind:currentTime={time} bind:duration={duration} bind:paused={paused} bind:this={video} loop={mimic_gif} style='height: {height}px; width: {width}px')
		source(src={video_url} type='video/mp4')
	figure.media-player-video-hint-overlay(style='height: {height}px; width: {width}px') ▶ Play in fullscreen
	menu.media-player-controls
		Button(action={play_pause} key='p' text="{paused ? '▶' : '■'} {Time.sToMediaDurationStr(time > 0 ? time : duration)}")
		.media-scrobbler
			figure.media-scrobbler-graphics
				{#each buffer_regions as region}
					span.media-scrobbler-buffer-region(style='left: {region.start/duration*100}%; width: {(region.end-region.start)/duration*100}%')
			input.media-scrobbler-input(bind:this={scrobbler} on:input={e => waiting_for_seek ? null : time = e.target.value} max={duration} min={0} step={1/1000} type='range')
		.media-volume
			span.media-volume-region-mute M
			span.media-volume-region-sound S
			input.media-volume-input(max={1} min={-1} step={0.1} type='range' on:input={e => set_volume(e.target.value)} value={volume})
		Button(action={toggle_fullscreen} key='f' text={fullscreen ? '→←' : '⟷'})

style.
	audio
		display none
	video
		background black
		border-radius 6px
		:fullscreen &
			border-radius 0
			height 100% !important
			width 100% !important
		.media-player-controls-hidden &
			cursor none
	::-webkit-media-controls
		display none
	::-webkit-slider-thumb
		appearance none
		background black
		height 2em
		width 3px
	.media-player
		position relative
		&:fullscreen
			height 100%
			width 100%
	.media-player-controls
		display flex
		gap 1em
		margin-top 1em
		:fullscreen &
			bottom 0
			left 0
			padding 1em 25vw
			position fixed
			transition opacity 0.5s
			width 100vw
		.media-player-controls-hidden &:not(:hover)
			opacity 0
	.media-player-video-hint-overlay
		align-items center
		background rgba(0,0,0,0.5)
		border-radius 6px
		color white
		display flex
		justify-content center
		left 0
		opacity 0
		pointer-events none
		position absolute
		top 0
		.media-player:not(:fullscreen) video:hover + &
			opacity 1
	.media-scrobbler
		background var(--c-con-weak)
		border-radius 6px
		flex 1
		position relative
	.media-scrobbler-buffer-region
		background lightgray
		height 10px
		position absolute
	.media-scrobbler-graphics
		align-items center
		display flex
		height 100%
	.media-scrobbler-input
		appearance none
		background transparent
		height 100%
		left 0
		margin 0
		position absolute
		top 0
		width 100%
	.media-volume
		align-items center
		background var(--c-con-weak)
		border-radius 6px
		display flex
		position relative
		width 60px
		::-webkit-slider-thumb
			height 1em
			width 2px
	.media-volume-input
		appearance none
		background transparent
		left 0
		height 100%
		margin 0
		position absolute
		top 0
		width 100%
	.media-volume-region-mute
		align-items center
		border-right 1px solid
		display flex
		flex 1
		height 100%
		justify-content center
	.media-volume-region-sound
		align-items center
		display flex
		flex 1
		height 100%
		justify-content center