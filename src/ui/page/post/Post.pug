script.
	import { getContext } from 'svelte';
	import api from '../../../api/index.js'
	import { Time } from '../../../lib/index.js'

	import Button from '../../framework/Button.pug'
	import MediaPlayer from '../../framework/MediaPlayer.pug'
	import TextHTML from '../../framework/TextHTML.pug'
	
	import ListingNameTag from '../../listing/ListingNameTag.pug'
	import ListingPost from '../../listing/ListingPost.pug'
	
	import UserAvatar from '../user/UserAvatar.pug'
	import UserDistinguish from '../user/UserDistinguish.pug'
	
	import PostAge from './PostAge.pug'
	import PostComment from './PostComment.pug'
	import PostFlair from './PostFlair.pug'
	import PostScore from './PostScore.pug'
	import PostTag from './PostTag.pug'

	import html_embeds from './embed/html_embeds.coffee'
	import iframe_embeds from './embed/iframe_embeds.coffee'
	
	export short_id = null
	error = null
	gallery_expanded = false
	listing_sort = 'hot'
	loading = false
	more_replies_loading = false
	post = null
	profile_data_loaded = false
	set_theme_color = getContext('set_theme_color')
	api.loadWatch(api.ID('post', short_id),
		(x) ->
			{ data: post, error, loading } = x
			if post?.subreddit
				api.loadWatch(api.ID('subreddit', post.subreddit), ({ data: subreddit }) ->
					set_theme_color(subreddit?.primary_color ? subreddit?.key_color)
				)
			if post?.contributors?.length
				api.loadWatch(api.ID('users', post.contributors),
					(x) -> if x.data or x.error then profile_data_loaded = true
				)
			if post?.more_replies
				api.watch(post.more_replies_id,
					(x) -> { loading: more_replies_loading } = x
				)
	)

svelte:head
	{#if post}
		title r/{post.subreddit} - {post.title} 
article.post
	{#if error}
		.post-unavailable-reason
			{#if error instanceof api.errors.ServerBadRequestError && error.code === 403}
				| Post subreddit is not accessible (potentially banned).
			{:else}
				| Post unavailable for unknown reasons.
	{:else if loading}
		.post-loading-message Loading...
	{:else if post}
		{#if post.removed_by_category}
			.post-unavailable-reason
				{#if post.removed_by_category === 'author' || post.removed_by_category === 'deleted'}
					| Deleted by author.
				{:else if post.removed_by_category === 'moderator'}
					| Removed by a moderator.
				{:else if post.removed_by_category === 'reddit'}
					| Removed by Reddit spam filter.
				{:else if post.removed_by_category === 'copyright_takedown'}
					| Removed by Reddit copyright compliance.
		header.post-header
			PostScore(awards={post.all_awardings} controversiality={post.upvote_ratio > 0.33 && post.upvote_ratio < 0.67 ? 1 : 0} upload_vote={(vote) => api.submit(api.ID('post_vote', short_id), { numerical_vote: vote })} value={!post.hide_score && post.score} vote={post.likes == null ? 0 : post.likes ? 1 : -1})
			{#if post.link_flair_text}
				PostFlair(color={post.link_flair_background_color} emoji_style='image' rich_text={post.link_flair_richtext} text={post.link_flair_text})
			h1.post-title {post.title}
			.post-metadata
				{#if post.distinguished}
					UserDistinguish(type={post.distinguished})
				UserAvatar(name={post.author})
				PostAge(created={post.created_utc} edited={post.edited} size='medium')
				.post-tags
					{#if post.archived}
						PostTag(name='archived')
					{#if post.locked}
						PostTag(name='locked')
					{#if post.quarantine}
						PostTag(name='quarantined')
					{#if post.over_18}
						PostTag(name='nsfw')
					{#if post.stickied}
						PostTag(name='sticky')
					{#if post.is_original_content}
						PostTag(name='oc')
		section.post-content
			{#if post.format === 'self'}
				{#if !post.selftext.length}
					.post-selftext-empty
			{:else if post.format === 'prediction'}
				ol.post-predictions
					{#each post.tournament_data.predictions as prediction}
						h2.post-prediction-title {prediction.title}
						dl.post-prediction-options
							{#each prediction.options as option}
								li
									dt
										meter(max={prediction.total_stake_amount} min={0} value={option.total_amount})
									dd {option.text}
			{:else if post.format === 'media'}
				{#if post.media.length > 1}
					menu.post-content-actions
						Button(action={() => gallery_expanded = true} key='e' text='Expand all (+{post.media.length - 1})')
					ol.post-gallery
						{#each post.media as media, index}
							{#if index < 1 || gallery_expanded}
								figure.post-gallery-item
									a(href={media.image_url} rel='external noreferrer preconnect' target='_blank')
										picture
											source(srcset={media.image_url_960})
											img.post-gallery-image(alt='image {index + 1} of {post.media.length} in gallery' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}")
									{#if media.caption_text || media.caption_url}
										figcaption.post-gallery-image-caption
											{#if media.caption_text}
												p {media.caption_text}
											{#if media.caption_url}
												a(href={media.caption_url}) {media.caption_url}
				{:else if post.media.length === 1}
					{@const media = post.media[0]}
						menu.post-content-actions
							Button(action={() => window.open(media.image_url)} key='f' text='Full size')
						{#if media.video_url}
							MediaPlayer(audio_url={media.video_audio_url} dimensions={[480, 270]} mimic_gif={media.is_gif} video_url={media.video_url})
						{:else if media.image_url}
							a(href={media.image_url} rel='external noreferrer preconnect' target='_blank')
								picture
									source(srcset={media.image_url_960})
									img.post-image(alt='' src={media.image_url} style="aspect-ratio: {media.aspect_ratio}")
			{:else if post.format === 'link'}
				{#if post.url}
					menu.post-content-actions
						Button(action={() => window.open(post.url)} key='e' text='Open link')
					{#if html_embeds(post)}
						{@const embed = html_embeds(post)}
							{@html embed.html}
					{:else if iframe_embeds(post.url)}
						{@const embed = iframe_embeds(post.url)}
							<!-- svelte wants iframe "title" attribute, which interferes with fullscreen playback (tooltip obscuring screen) and anyway provides no additional info here beyond what's in the URL -->
							<!-- svelte-ignore a11y-missing-attribute -->
							iframe.post-iframe(allow={embed.iframe_allow} allowfullscreen='true' src={embed.iframe_url})
					{:else}
						.md.post-link
							a(href={post.url} rel='external noopener preconnect') {post.url}
			{:else if post.format === 'crosspost'}
				ListingPost(link_params={{ lt: 'r', ln: post.subreddit, ls: listing_sort }} short_id={post.crosspost_parent} show_subreddit={true})
			{:else}
				p [Error displaying post.]
			{#if post.selftext_html && !post.removed_by_category}
				.post-selftext
					TextHTML(html={post.selftext_html})
		section.post-comments
			h1.post-comments-label Comments
			{#if post.replies?.length && profile_data_loaded}
				{#key post.replies}
					ol.post-comments-list
						{#each post.replies as reply_short_id}
							PostComment(short_id={reply_short_id})
						{#if post.more_replies}
							.post-more-replies
								Button(action={() => api.load(post.more_replies_id)} appearance='text' loading={more_replies_loading} text="+ {post.num_more_replies} more {post.num_more_replies === 1 ? 'reply' : 'replies'}...")
			menu.post-comments-actions
				Button(disabled={post.archived || post.locked} text='+ Add a comment...')

style.
	.post
		width 480px
	.post-content
		margin-top 20px
	.post-comments
		margin-top 20px
	.post-comments-actions
		margin-top 3em
	.post-comments-label
		color var(--c-text-weak)
		font-size 10px
		font-feature-settings 'cpsp'
		text-transform uppercase
	.post-comments-list
		margin-top 2em
	.post-content-actions
		display flex
		gap 1em
		padding 10px 0
	.post-gallery
		counter-reset gallery-index
		display flex
		flex-flow column nowrap
		gap 10px
	.post-gallery-image
		width 100%
	.post-gallery-image-caption
		color var(--c-text-weak)
		font-size 11px
		padding-left 3ch
		margin-top 5px
		&::before
			content 'î„¸'
			left 0
			position absolute
	.post-gallery-item
		display flex
		flex-flow column nowrap
		gap 3px
		position relative
		&::before
			content counter(gallery-index)
			counter-increment gallery-index
			font-size 11px
			line-height 1
			position absolute
			right calc(100% + 5px)
	.post-iframe
		aspect-ratio 16/9
		border-radius 1ch
		width 100%
	.post-image
		width 100%
	.post-loading-message
		padding 10px
	.post-metadata
		align-items center
		color var(--c-text-weak)
		display flex
		gap 10px
		height 24px
		margin-top 1ch
	.post-more-replies
		margin-top 2.25em
	.post-prediction-options > li
		display flex
	.post-selftext
		margin-top 20px
	.post-tags
		display flex
		gap 3px
	.post-title
		font-size 14pt
		font-weight inherit
		line-height 1.4
		margin-top 0.25em
	.post-unavailable-reason
		background salmon
		color white
		padding 10px